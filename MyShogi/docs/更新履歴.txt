

- 棋譜の途中から対局をするとき、そこより手数を戻そうとすると持ち時間がゼロになるので時間切れ負けになる件


■　2018/08/09


- NotifyCollection、2/3ぐらい書いた。


■　2018/08/07


- 検討ウィンドウのカラムの横幅を次回起動時に復元して欲しい。(masaさん)
  - 各カラムの幅を配列に記憶しておくので、NotifyObjectの配列版みたいなのが必要になりそう。
  - .NETのObservableCollectionみたいなの自作するよりは、add/removeのないcollectionなら
    NotifyObjectを単に配列にして使ったほうが圧倒的に扱いやすい気がしなくもないが…。
  - あとあとのことを考えると作っておいたほうが無難なのか…。自作するか。


- NotifyCollection、1/3ぐらい書いた。


- ウィンドウを最大化したならそれを終了時に保存/次回起動時に復元すべき。(tanuki-さん)
  - 最大化状態であるかどうかは保存されていないが、現在の実装で、DesktopLocationとサイズ自体は保存されているのでまあいいような…。


- 棋譜の途中から対局をするとき、そこより手数を戻そうとすると持ち時間がゼロになるので時間切れ負けになる件
  - 簡単ではなさそう。中断の再開処理と合わせて、あとでよく考える。
  

- tooltipに間違えてVSのデザイナーから"\r\n"を使っていた箇所がある件。(和左積 商さん)
  - 「検討エンジン設定」ダイアログの「詳細設定」ボタンのtooltip、修正しました。


- マスターアップ終わったのでドキュメント類を整理


■　2018/08/05


-MYSHOGI_VERSION_STRING = "1.0.1";に設定。情報ダイアログに表示される。
  - Update1は"1.1.0"を予定。


- インストーラ設定 #34(Mizarさんのプルリク)
  - β5版インストーラ
    - rev1
      - 仮にインストーラにおけるライセンス文章に GPLv3 の文章を設定
      - sources/gpl.txt 追加
      - beta5に追随、 book/yaneura_book2.db 追加
    - rev2
      - version 0.0.0.5
      - .NET Framework 4.6.1 以降がインストール済みかのチェック追加
    - rev3
      - version 0.0.5.3
      - 製品名から "(β版)" を除去
      - License 本文を入れ替え
      - Readme ダイアログの除去
      - デフォルトのインストール先フォルダの変更・インストール先選択ダイアログの追加
  - β6版インストーラ
    - rev1
      - version 0.0.6.1
      - DVD媒体からインストール実行に時間が掛かる旨のREADME画面を追加。
  - β7版インストーラ
    - rev1
      - version 0.0.7.1
      - README更新（低スペPCでDVD媒体からのインストールに20分以上掛かる報告に追随）
      - gpsfishエンジン除去
      - tanuki-詰将棋エンジン追加
  - β10版インストーラ
    - rev1
      - version 0.0.10.1
      - Autorun.inf更新
        - メディア挿入時のDVDドライブの右クリックメニューに.NET
        Frameworkインストールを追加
  - β10.1版インストーラ
    - version 1.0.0.0


■　2018/08/04


- β10.1リリース(致命的なバグがなければこれでマスターアップ)
  - eval : MyShogi201807260000Eval.zip
  - 本体 : MyShogi201808052315beta10.1.zip
    →　このバージョンでマスターアップ完了しました。[2018/08/05 12:00]


- β10に関してβテスターの人たちの意見反映その1
  - 待った絡みで棋譜ウィンドウの表示がおかしくなることがある件。(まふさん)
    - 待ったしたときに棋譜の1行削除のハンドラを2度呼び出すが、ListView.Items.RemoveAt()と書くべきところRemove()と書いたため、削除に失敗していた。
-MYSHOGI_VERSION_STRING = "1.0.0";に設定。情報ダイアログに表示される。


- オンラインマニュアル等、更新。


- マスターアップ完了につき、WIPなど更新。
  - バージョン情報で表示されるVersionのところ、0.0.1のまま、マスターアップしてしまった。笑える。


- β10リリース(致命的なバグがなければこれでマスターアップ)
  - eval : MyShogi201807260000Eval.zip
  - 本体 : MyShogi201808052015beta10.zip

// --- WIPのほうから削除

- 棋力の調整について
  - uuunuuunさんの計測に基づいて、node数制限をする形になっています。
  - 1級以下はあまり自然な弱さになっていないのが少し気になりますがGUI側ではどうにもならないです。
  - 評価関数によっても違う？
  - β3で再度調整しなおしました。ご意見ください。
  - β6でプリセットのThreadsを4→2に変更したのでやや棋力が変わっているかも知れません。(最大でR100程度)

- gpsfish、AVX2用しか存在しない件。
  - SSE2用もAVX2用をコピーしてリネームしたものなのでSSE2環境では動かないです。またNO SSE(32bit版)も用意していないです。
	- gpsfishは動作のテスト用につけているものなので製品版では削除します。
- gpsfishのバナーがQhapaqのバナーを改変したものになっている。
  - 動作テストのために仮で作ったものなのでこうなってます。
	- gpsfishは動作のテスト用につけているものなので製品版では削除します。

- 18コアのPCでも2スレッドしか使われていない。
  - 「将棋神」「カスタム」以外を選択した時は、その棋力を担保するために、Threads = 2 , NodesLimit = XXXが設定されるためです。

- 棋譜の読み上げについて音量がバラバラ…。
  - 私も気になってはいますが、激指の素材そのままです。今回はどうしようもなさげです。
  - 次回(来年？)は音声の収録から私が立ち会います(｀･ω･´)ｂ

- サウンドが鳴らない件
  - Windows Media Playerが使える環境でないと再生されないようです。
  - 詳しくは、[FAQ](faq.md)をご覧ください。

// --- ここまで

- β9に関してβテスターの人たちの意見反映その3
  - 局面を読み込ませての検討モードの時に11の駒を取る移動が同Xと検討の読み筋に表示される。(ぐららるさん)
    - 修正しました。


- β9に関してβテスターの人たちの意見反映その2
  - 検討モードの時に読み筋に現れる"resign"を"投了"と表示することにした。


- β9に関してβテスターの人たちの意見反映その1
  - 「検討時の駒音」変更したときにメニュー更新されない。(ぐららるさん)
    - PieceSoundOffTheGameの変更に対してUpdateMenuItem()のハンドラセットしてなかった。


- USI2.0に"info pv"に出現する特殊な指し手の件、追加。


- β9リリース(致命的なバグがなければこれでマスターアップ)
  - eval : MyShogi201807260000Eval.zip
  - 本体 : MyShogi201808050800beta9.zip


- β8に関してβテスターの人たちの意見反映その12
  - エンジン同士の対局で「中」を押した時にファイルメニューがアクティブにならないことがある。(masaさん , まふさん)
     - たぶん修正できた。
  - 検討モード、詰検討モードから「検」「詰」ボタンを押しても反応しないことがあったの修正。


- β8に関してβテスターの人たちの意見反映その11
  - 棋譜を開いて終局図を出したときに駒が浮いた状態になることがある。(uuunuuunさん)
    - 駒選択状態から、棋譜読み込み・棋譜貼り付けなどを行うとこの状態になるようだ。
    - 局面読み込み時に"TurnChanger"をRaiseすることで防げた。


- β8に関してβテスターの人たちの意見反映その10
  - 検討ウィンドウの左右のスクロールバー生きてない。
    - そんなもの最初から用意してなかった。
  - 検討ウィンドウのNPS,HASHなどの欄にTooltip追加。

エンジンのHASHの使用率です。
この値が大きいと探索効率が悪くなります。
(コンピューターの棋力が下がります)
この値が大きい場合(50%以上)は、エンジン設定の
HASHの項目でHASHの割当を増やすなどして調整すべきです。

表示する候補手の数。
これを増やすとたくさんの候補手が表示されるようになりますが、
1つの候補手に費やす時間は相対的に減るため、読みの質は下がります。

- β8に関してβテスターの人たちの意見反映その9
  - RDPで棋譜の再生時に表示が乱れる件。(suimonさん)
  - 手数が長くなってくると棋譜ウィンドウでの移動時に画面がちらつく件。(うさ親さん)
    - KifuTree.GotoSelectedIndex()でDoMove()のときのPositionの更新を抑制してなかった。


- β8に関してβテスターの人たちの意見反映その8
  - 詰検討
    - 詰検討で秒数指定をして検討を開始すると例外が出る。
    - 定期的に読み筋が表示されて欲しい。
      - 詰将棋エンジン側が対応してない。tanuki-さんに相談。
    - とりま秒数で打ち切るのは棋譜解析には必要だが、詰み検討には不要な気がするので秒数が設定できる機能、削除するか。
      - 詰検討設定の時間設定をするGroupBox無効化しておく。


- β8に関してβテスターの人たちの意見反映その8
  - COM同士の対局のあと検討を開くとnull参照で落ちる件。(うさ親さん)
    - 対局設定の人間/CPUの設定見に行ってました(´；ω；｀)　修正しました。


- β8に関してβテスターの人たちの意見反映その7
  - 読み筋にある win(宣言勝ち) が表示されない。
    - 読み筋に宣言勝ち、千日手、千日手勝ち、千日手負け、優等局面、劣等局面を表示するようにした。
    - 宣言勝ちと千日手引分が表示されることは確認した。他は局面がなくてわからない。
- Scanner.PeekText()したあとParseText()せずに終端になったときにIsEofがtrue返すのバグなのでは…。修正した。

- 千日手の表示テスト

V2.2
N+澤田真吾 六段
N-藤井聡太 四段
$EVENT:棋王戦
$SITE:関西将棋会館
$START_TIME:2017/06/02 9:00:00
P1-KY-KE-GI-KI-OU-KI-GI-KE-KY
P2 * -HI *  *  *  *  * -KA * 
P3-FU-FU-FU-FU-FU-FU-FU-FU-FU
P4 *  *  *  *  *  *  *  *  * 
P5 *  *  *  *  *  *  *  *  * 
P6 *  *  *  *  *  *  *  *  * 
P7+FU+FU+FU+FU+FU+FU+FU+FU+FU
P8 * +KA *  *  *  *  * +HI * 
P9+KY+KE+GI+KI+OU+KI+GI+KE+KY
+
+7776FU
-8384FU
+2726FU
-4132KI
+6978KI
-8485FU
+8877KA
-3334FU
+7988GI
-2277UM
+8877GI
-3122GI
+3938GI
-7162GI
+4746FU
-5142OU
+3847GI
-7374FU
+4958KI
-6364FU
+5968OU
-6263GI
+4756GI
-2233GI
+3736FU
-8173KE
+4645FU
-6162KI
+0046KA
-5354FU
+6766FU
-8281HI
+6879OU
-4252OU
+2937KE
-5261OU
+2625FU
-6172OU
+7988OU
-9394FU
+9796FU
-1314FU
+1716FU
-3242KI
+5868KI
-4253KI
+9998KY
-5352KI
+8899OU
-5242KI
+7888KI
-4252KI
+8878KI
-5242KI
+7888KI
-4252KI
+8878KI
-5242KI
+7888KI
-4252KI
+8878KI
%SENNICHITE


- β8に関してβテスターの人たちの意見反映その6
  - 非合法手がある棋譜をKIFに書き出したときにそこが空欄になるの修正。
  - 詰検討、秒数を指定するとエラーになる。tanuki-さんに相談。
  - Positionみたいなmutableなオブジェクト、Raiseする側でClone()しないと駄目。
    - 修正した。
  - NotifyObjectのBind()、相手側の値を変更してないなかった。
  - エンジン側で例外が出たときに二重に例外が出るのを修正。


- β8に関してβテスターの人たちの意見反映その5
  - 詰将棋用エンジンのオプションの個別設定画面、それ用にカスタマイズする。
  - 詰将棋エンジンの個別設定が反映していないようだ。修正する。
    - 詰将棋エンジンの個別設定を検討エンジンの個別設定のエントリーに保存してた。修正した。


- β8に関してβテスターの人たちの意見反映その4
  - 「エンジン選択ダイアログ」が2つ出た状態になる件。(masaさん)
    - 対局設定ダイアログでエンジン未選択でエンジン選択した時にCPUに変更すると、
    エンジン未選択のままCPUに変更されたのでここでエンジン選択ダイアログが出るという現象のようだ。
    - ShowDialog()のあとDispose()を明示的に呼ばないと、これが残っていて、次に生成したときにそれが再利用されて古いオブジェクトに対してデータバインドする的な奇妙な現象だった。
    - ShowDialog()するものはすべてusing()..か、try{}finally{ X.Dispose();}で書くようにする。
    - エンジン選択ダイアログを閉じたときに画面ちらついてたの、ちらつかなくなった。
      - Dispose()していないのが原因だったのか…。なんぞこれ。


- β8に関してβテスターの人たちの意見反映その3
  - 対局終了後に読み上げがずっと続くの止められない件。(masaさん)
    - 対局終了でそこで以降の読み上げをキャンセルして「ありがとうございました」の音声を出すことにした。
    - メニュー → 音声のところで選択できるようにしておく。


- β8に関してβテスターの人たちの意見反映その2
  - 宣言勝ちが非合法手に扱われてしまうことがある件。(masaさん)
  - 対局設定ダイアログの入玉設定の項目の並び順がエンジンオプション設定の同設定の項目の並び順とが異なっていたのが原因。修正しました。


- β8に関してβテスターの人たちの意見反映その1
  - ダイアログのセンタリングで画面外に出ることがある件。(tanuki-さん)
    - 新しく作られるダイアログが画面外に出ないように修正しました。
    - 上下・左右のどちらかにめり込まないと表示できない時は、右と下にめり込むのは許容。左と上にめり込むのは認めない。(ウィンドウのドラッグ、閉じるが出来なくなるため)


■　2018/08/03


- β8リリース
  - eval : MyShogi201807260000Eval.zip
  - 本体 : MyShogi201808041430beta8.zip


- tanuki-詰将棋エンジン、新しいバージョンに差し替え。
  - より長い詰み手順を返すMorePreciseMatePvオプションを追加した (#81) 
  - 詰将棋用エンジンのオプション画面、それ用にカスタマイズしたほうがいいような…。あとでやろう。
  - 最後、PVの長さを手数として表示するようにしておく。


- 検討・棋譜まわりの作業その4
  - 検討ウィンドウで継ぎ盤の◀▶が正常に動作しない件その2
    - 継ぎ盤の棋譜ウィンドウ、Visible = falseだと更新されないのが原因か？
    - Form.Loadイベント、表示ごとに発生すると勘違いしてた。これ危ういな…。使うのやめよう。
      - MainDialog.Load()で使ってるが、これはまあいいや…。
    - 継ぎ盤で棋譜、末尾に行ったあと左を2回押さないと1手戻らないの修正。
  - 検討時にOutputFailLHPVをfalseにしてなるべく綺麗なPVにする。


- 検討・棋譜まわりの作業その3
  - 棋譜ウィンドウのカーソルがある場所と違う局面になっている。(tibigameさん)
  - 読み込んだ棋譜がいま表示している棋譜と同じ行数だったときに局面が移動しないバグ修正。
  - 対局開始時に継ぎ盤の局面を初期化するようにした。

  
- 検討・棋譜まわりの作業その2
  - 検討ウィンドウで継ぎ盤の◀▶が正常に動作しない件
  - 検討モードで検討ウィンドウを閉じたのなら、エンジンを終了させ検討モードを抜ける。
- EngineDefine.MinimumHashMemory = 100→128に変更する。(2の冪乗でないとうまく扱ってくれないエンジンがありうるので)


- 検討・棋譜まわりの作業その1
  - 検討開始～警告が出てキャンセルしたときに警告ダイアログがもうひとつでるの修正。
    - その時に検討モードからきちんと抜けていないのを修正。
  - 検討モード
    - 検討中にToolStripの◀▶で局面を移動させた時にその局面での思考が開始されないの修正。
    - 検討中に棋譜ウィンドウで局面を移動させた時にその局面での思考が開始されないの修正。


- 詰将棋エンジンまわりの作業その1
  - Position.IsLegal()の駒打ちの駒が違法であるのを除外できてなかったの修正。
  - "info score mate +"のようなMateに付随するスコアがparse失敗していたの修正。
  - 詰将棋、5手ほどしか手順が表示されないが、一応動いている。
  - これだけしか手順返ってこないの、エンジン側の仕様なのかな…。
    - tanukiさんに確認しとく。
    - たまたま(受け側の逃げ方が悪くて)詰む手順だったようだ。

- 詰将棋のテスト17手詰め
  - cf.  http://www005.upp.so-net.ne.jp/tsumepara/contents/4appre/kanju/kanju13.htm
  - 手順が5手ほどしか出ないが解答自体は出来そう。
  - 一応、詰将棋エンジン動いている。

後手の持駒：金二　歩十七　
  ９ ８ ７ ６ ５ ４ ３ ２ １
+---------------------------+
| ・ ・ ・ ・ ・ ・ ・ ・ ・|一
| ・ ・ ・ ・ ・ ・ ・ ・ ・|二
| ・ ・ ・ ・ ・ ・ ・ ・ ・|三
| ・ ・ ・ ・ と ・ ・ ・ ・|四
| ・ ・ ・ ・ ・ 銀 ・ ・ ・|五
| ・ 玉 ・v玉 ・v銀v馬 ・ ・|六
| ・ 角 ・ ・v飛 龍 ・ ・ ・|七
| ・ ・v金 ・ ・v金 ・ ・ ・|八
| ・ ・ ・ ・v銀 銀 ・ ・ ・|九
+---------------------------+
先手の持駒：桂四　香四　


- β7リリース
  - eval : MyShogi201807260000Eval.zip
  - 本体 : MyShogi201808040650beta7.zip


- 検討ウィンドウ設定まわりの作業その9
  - 検討ウィンドウにtanuki-2018初段　のようにプリセット名も表示するようにしたほうがいいか？
  - 実装した。


- 検討ウィンドウ設定まわりの作業その8
  - 検討開始した時に対局者名がエンジン名になってしまうの修正。
  - エンジンとの対局時で、対局者名を対局設定で変更しているときは、検討ウインドウの名前欄にエンジン名も括弧つきで表記するように。
  - 検討ウインドウでseldepthがないときにdepth欄にも"/"が表示されていたの修正。
  - tanuki-詰将棋エンジン追加
    - tanuki_mate_avx2.exe
    - tanuki_mate_sse42.exe
    - tanuki_mate_sse41.exe
    - tanuki_mate_sse2.exe
    - tanuki_mate_nosse.exe
  - 詰検討のときにtanuki-詰将棋エンジンが選べるようにした。
  - 詰将棋探索、実装まだ。


- 検討ウィンドウ設定まわりの作業その7
  - gpsfish、定跡にhitしたときにbestmoveしか返さない場合、検討モードで使うときにbestmoveの情報しか表示できない。
    - 定跡にhitしたときもinfo pv..などで定跡を読み筋として返すことを推奨する。
  - 検討ウィンドウで定跡の指し手がわかりにくいの修正。
    - info pv.. で解釈できない文字列をそのまま保持しておき、そのまま読み筋のところに表示するようにした。


- 検討ウィンドウ設定まわりの作業その6
  - エンジン検討で時間固定で思考させるのとても難しいのでは…。
  - go btime 0 wtime 0 byoyomi 5000で思考させればいいのか。そうか。
  - 検討時に検討エンジン設定で設定した思考時間に従うようにした。


- 検討ウィンドウ設定まわりの作業その5
  - 検討モードで、検討エンジン選択ダイアログで選択したエンジンで検討するようにした。
  - 最後、engine/gpsfish/ , engine/gpsfish2/ のフォルダを除外する。
    - GPSfish関連のフォルダ、Debug/engineから削除。


- β6に関してβテスターの人たちの意見反映その6
  - 32bit環境で8スレッド以上で動作しない件。(うさ親さん)
    - 8スレ以上割当らないように修正。
    - FAQに追加。
    - 思考エンジン側でスレッドに割り当てる論理アドレスが2GBを超えるため？
    - 32bit環境で8スレ以上を手動で割り当てた時に開始時にwarningを出すように。


- β6に関してβテスターの人たちの意見反映その5
  - 32bit環境でシステム情報を開くと落ちる。(うさ親さん)
    - 修正しました。
  - 起動→終了のときに棋譜を保存するか聞いてくるの修正。
  - エンジンオプションのスレッドのところにスレッド数に比例してメモリを消費する件、追記。


- β6に関してβテスターの人たちの意見反映その4
  - 「▲７八飛　△８四歩」みたいな文字列を平手開始局面からの棋譜として読んで欲しい。(tibigameさん)
    - Mizarさんのプルリク#32で対応。
  - 読み込んだ棋譜から手動で新たに指し手を進めたら、未保存のフラグを立てて欲しい。(tibigameさん)
    - 棋譜が変更になったかどうかを判定しないといけないので、KifuTreeがDirtyフラグを持たないと駄目なのか…。そう修正する。
    - 修正しました。


- 棋譜文字列の先頭行に"▲" "△" があれば、KIF文字列と仮定してみる #32 (Mizarさんのプルリク)


- β6に関してβテスターの人たちの意見反映その3
  - 2GB環境でQhapaqにて自動Hash60%,6スレは動くけど、自動Hash60%,8スレだと落ちる件。(うさ親さん)
    - 1スレッドあたり25MBはstackだけの計算で実際はそれ以外もあるので足りないのかも。1スレッドあたり40MBで計算するように修正しました。
  

- 検討ウィンドウ設定まわりの作業その4
  - メニュー　→　対局　→「検討モード」を「検討エンジン設定」に変更。
    - 「検討エンジン設定」を選ぶか、「検」討ボタンを押して検討エンジンが設定されていないときに検討エンジン設定ダイアログを出すようにした。
    - 詰検討についても同様。


■　2018/08/02


- 検討ウィンドウ設定まわりの作業その3
  - エンジン選択と詳細設定のダイアログもメインウィンドウに対してセンタリングすべきか。
    - そうする。
- FormLocationUtility追加


- 対局者設定でバナーのないエンジンを選択した時、対局者名をユーザーが書き換えたあとエンジン名すらわからないのでは…。
  - NO BANNERではなく、エンジン名をそこに表記すべきなのか…そうか…。まあ、エンジン登録のときにバナー生成すべきなんやな…。
  - エンジン登録の機能追加するときに考えることにする。

- 検討ウィンドウ設定まわりの作業その2
  - ToolStripの検討ボタンを押した時に検討エンジンが選択されていなければ、検討エンジンの設定画面を出す。(初回など)
  - AboutDialog , SystemInfoDialogをmodal dialogに変更。
  - 各種設定ダイアログを表示するとき、メインウィンドウ上にセンタリングするようにした。
  - ConsiderationSetting → ConsiderationEngineSettingにrename
    - 詰検討エンジンの設定もこのクラスを使い回すことにした。

- USI2.0に以下の文、追加。
  - "isready"の前に"setoption"を送らないといけない問題
    - 思考エンジンは、"isready"に対して時間のかかる処理(評価関数ファイルの読み込み、置換表の確保・ゼロクリアなど)を行う必要があるが、
    評価関数ファイルの存在するフォルダを"setoption"コマンドで受け取りたい場合、isreadyの前に"setoption"が完了している必要がある。
    - GUI側はこのことを保証しなければならないし、保証するべきである。


- β6に関してβテスターの人たちの意見反映その2
  - エンジンの詳細設定で"ConsiderationMode"をtrueにしたときに "PvInterval"の設定値が無視される件(masaさん)
    - 設定のところに説明文追加
  - 「将棋神」のプリセットで、棋力に直接影響しそうなところに関して値を設定する。(NodesLimit = 0 , DepthLimit = 0 , MultiPv = 1など)
  - 「九段」～「10級」も DepthLimit = 0 , MultiPv = 1 を設定しておく。


- Kif形式棋譜読み込みで初期局面の持駒が読み込まれない問題の修正 (thanks tibigameさん) #31 (Mizarさんのプルリク)


- 検討ウィンドウ設定まわりの作業その1
  - ConsiderationSettingDialog追加。
    - デザインできた。
    - 複数エンジン用の検討モード別途用意したほうがいいかも…。
    - GameModeEnumにConsiderationWithMultiEngine追加。これ用の設定画面は別途用意しよう…。
- メニューの対局→検討ウィンドウの設定追加。
- 対局設定のプリセットの表示に垂直スクロールバー追加。
- エンジンオプションの共通設定に以前あって、そのあと削除された項目があって、個別設定で共通設定に従うになっているとそのオプションの値が代入されないのを修正。


- β6に関してβテスターの人たちの意見反映その1
  - メインウィンドウの表示位置、前回起動時のものを保存するように。(まふさん)
    - 修正案(kumaさん)
      - 採用させていただきました。
- 棋譜ウィンドウの横幅の設定、メニューの「表示」のところから「ウィンドウ」のところに移動。
- 「将棋神」「カスタム」のところにCPU負荷の件を追記。
- Scanner.PeekText()、変数名など少し変更。


- 棋譜判定の改善 #30 (tibigameさんのプルリク)
  将棋所、ShogiGUIからの局面コピーが通るように
  (KIF形式の持駒の処理が未完)


■　2018/08/02


- β6リリース
  - eval : MyShogi201807260000Eval.zip
  - 本体 : MyShogi201808021740beta6.zip


- エンジン共通設定を読み込んだ時に、以前あった項目があるとそれによって個別設定が上書きされてしまうので起動時に
  現在存在しない項目を削除するコード追加。


- EvalDir共通設定を反映していない件。
  - 反映してた。なぜこれで評価関数を読み込めるのか？
    - ああ、わかった。isreadyを送信してからsetoptionを送信するからエンジン側のフォルダ変更が間に合わないのか。
    - ここ修正するとして、EvalDirを共通設定から削除しないといけない。
  - エンジン初期化のときに"isready"送信前にsetoptionを送信するようにした。
  - エンジンがevalの読み込みに失敗したとき、「エンジン初期化中」のダイアログが消えない。(kumaさん)
    - プロセス間通信が切断されたときに、エラーダイアログを表示するように修正。
- エラーダイアログの表示位置、メインウインドウの真ん中あたりに固定する。
  - ああ、ディスプレイの中央に表示されてるのか、これ。これプロシージャーをhookしないと変更できないようだ。このままにしておく。
- docs/dev_manual.md追加。
- faq.mdの文面、少し修正した。


- メニュー　→　「情報」　→　「操作説明(オンラインマニュアル)」　追加。


- β5に関してβテスターの人たちの意見反映その9
  - 検討時の駒移動に対してShogiGUIなどでは駒音がある。(Backgammonさん)
    - デフォルトでつけるようにしました。
    - オンオフをメニューの音声　→　検討時の駒音　でオンオフ出来るようにしました。
    - メニューの音声→「棋譜読み上げ」の表示名を「対局時の棋譜読み上げ」に変更。
- HumanPlayerのSpecialMoveに指し手入れるの危なっかしいのでBestMoveに指し手を入れるように変更。
  - SpecialMoveにユーザーがUIから操作した指し手を入れて、その直後にTIME_UPなどでSpecialMoveが生じた時に危うい。


- β5に関してβテスターの人たちの意見反映その8
  - 棋譜をドラッグ＆ドロップで読み込めるようにして欲しい。(まふさん)
    - 実装しました。
    - 対局中・検討中は貼り付けできないように。また、未保存の棋譜がある時には警告を出すように。
- メニューのファイルのところ、ショートカットキーのOが２つあったの修正。
- MainDialogにViewModel追加。棋譜がないときにメニューの「上書き保存」が選択できないように。


- β5に関してβテスターの人たちの意見反映その7
  - エンジンのプリセット、Threads 4→2に変更。
    - 物理2コアのPCで4スレッドになるとCPU同士の対局でCPU負荷が100%になり続けるため。
  - クリップボードからの棋譜の貼り付け(tibigameさん)
    - 実装しました。
    - 対局中・検討中は貼り付けできないように。また、未保存の棋譜がある時には警告を出すように。
- 未知の形式の棋譜を読み込んだ時にエラーメッセージを表示するようにした。
- 物理コア数を取得する時にプロセッサが複数あるときは、それらの物理コア数を足し合わせるように修正。
- GameScreenControlViewModel.cs追加。
- GameScreenControlMain.cs、この名前にしているとVSのデザイナがコード生成を間違えるのでGameScreenControl.csにrename


- β5に関してβテスターの人たちの意見反映その6
  - エンジン設定ダイアログの「次ページ」ボタンが見つけにくい。(田中誠さん)
    - エンジン設定ダイアログの各オプション項目の説明文、わかりにくいのでTooltipで表示するように変更。
    - 個別設定のほう、共通設定に従うのチェックボックスが有効のときもTooltipが表示されるように修正。
    - Model.Common.Utility.ToolTipHelper.cs追加。
    - エンジンオプション設定で、見出しがある時に早めに次ページに行くように調整。


- β5に関してβテスターの人たちの意見反映その5
  - CPU負荷100%になるの、初心者向きにはよろしくないのでは。(uuunさん)
    - 激指は、スレッド数をCPUの物理コア数にしているようで、デフォルトではCPU負荷は50%になる。
    - 物理コア数をデフォルト値に変更しました。
    - エンジンオプションのThreadsのところに説明文追記。


- SystemInfo: コア数検出テスト #29 (Mizarさんのプルリク)


- β5に関してβテスターの人たちの意見反映その4
  - 検討ウィンドウがメインウィンドウに追従するの、メニュー→ウインドウ→検討ウィンドウのところから設定でオフに出来るようにした。
- GlobalConfigにConsiderationWindowFollowMainWindow追加。


- β5に関してβテスターの人たちの意見反映その3
  - 対局設定で、CPUとの対局のときにCPU側の対局者名の名前を変更しても次に開くとリセットされている件を修正。
    - 修正しました。
  - 対局設定でエンジン選択した時にたまにプリセット選ばれない時があるの修正。
    - 修正しました。
    - NotifyObject.SetValueAndRaisePropertyChanged()追加。
  - 検討ウィンドウを一度も出していないと検討ウィンドウの再表示が出来ないのを修正。
    - 検討ウィンドウの再表示、メニュー→ウインドウ→検討ウィンドウ→再表示に移動する。検討ウィンドウ関係の設定はここに入れる。
    - あとでメインウインドウに追随などの設定もここでやれるようにしたい。


- β5に関してβテスターの人たちの意見反映その2
  - 対局開始時、メモリ不足ならキャンセル出来たほうが良いのでは。(48さん)
    - ダイアログ修正しました。エンジン選択時も同様にダイアログ上でキャンセル出来るようにしました。
    - キャンセルした時に終局していることを示すため「ありがとうございました。またお願いします。」の音声読み上げ追加。
  - ダイアログ、対局中の終了はwarningのダイアログに変更。
  - 対局者名が途中で切れるため「tanuki-」のSDT5と2018の区別がつかない件。(48さん)
    - 半角換算で16文字まで表示するように。(全角は2文字としてカウント)


- β5に関してβテスターの人たちの意見反映その1
  - 思考エンジンのプロセス優先度、下がっていない件。(kuma)
    - 間違ったコードになってました。修正しました。
  - 「メニュー」→「情報」→「よくある質問(FAQ)」追加
    - とりあえずMyShogiのGitHubのFAQのページが開くようにしておいた。
  - サウンドが再生されない環境がある。(tibigameさん他)
    - C#のSystem.Windows.Media.MediaPlayerで再生できない環境がある。
      - 他の再生手段をオプションで選択出来るべきか。
      - 多重再生の出来るMicrosoftがサポートしている現行の技術、これぐらいしかないのだが…。
    - 「Windowsの機能の有効化または無効化」→「メディア機能」→Windows Media Playerのチェックボックスをオンにすると音が出た！(tibigameさん)
    - WindowsMediaPlayerをアンインストールしてから再インストールすると再生されるようになるらしい。(ぐららるさん , うさ親さん)
    - このノウハウ、FAQに書いておく。 



■　2018/08/01


- β5リリース
  - eval : MyShogi201807260000Eval.zip
  - 本体 : MyShogi201808011025beta5.zip


- β4に関してβテスターの人たちの意見反映その7
  - ×ボタンで閉じるとき、終了前に終了しますかのダイアログを出したほうが良いのでは。(kumaさん)
    - 対局中の×ボタン、棋譜が未保存の時の×ボタンに対しては警告を出すようにしました。
- ダイアログを出す時、エラーと情報と警告と確認の4つに分ける。
  - エラーならエラー、警告なら警告用のメッセージボックスを用いるようにする。
- TheAppクラス分離。TheAppMessageShow.cs追加。


- β4に関してβテスターの人たちの意見反映その6
  - DataContractつけたらGlobalConfigのデシリアライズに失敗するようになった。吐きそう。
    - DataContractつけるのやめる。無駄な時間であった…。
  - 何もエンジンが選択されていない状態から、エンジン選んで先後入替えでバナーおかしくなる件
    - 修正した。
  - 対局設定ダイアログ閉じる時にメインウインドウが一瞬白くなる件
    ShowDialog()したなかでShowDialog()を使うとこういう現象になるようだ。回避できそうにない。


- β4に関してβテスターの人たちの意見反映その5
  - 定跡 yaneura_book2.db 欠落。
		- どこか行った。発掘中。それらしきものを発掘してきた。
	- 定跡を変更した時にエンジンオプションをどう設定すれば良いのか不明瞭。
		- 定跡周りのオプション設定の説明文、追加。
  - 定跡、メモリに丸読みするとメモリ足りなくなるのか…。AutoHash、80%→70%をデフォルト値に変更。


- β4に関してβテスターの人たちの意見反映その4
  - 対局設定でプリセットを選択して、同種のエンジンをもう一つの対局者として選んだ時に、そのプリセットと同じものが選択されていなかったの修正。
  - エンジンを片側だけ選択して先後入替えた時の処理がおかしい。
- 対局設定ダイアログに入玉条件の設定追加
    入玉ルールなし
    27点法(CSAルール)
    24点法(CSAルール)
    トライルール
  - KIF形式にトライルールによる勝ちがないので入玉宣言勝ちにしとく。仕方がない…。CSA,JSON,PSN2など書き換えた。
- 対局設定ダイアログの入玉条件のComboBoxにTooltip追加。
    入玉条件を変更できます。コンピューターと対局する場合には詳細設定の「入玉条件」の項目も
    ここで選んだものと同様の設定にする必要があります。
    普通の入玉宣言ルールにしたいならば、27点法を選択してください。
    トライルールは、平手の初期局面で相手の玉のいた升に移動すれば入玉したとみなす特殊ルールです。
    (おまけ機能なので、このルールで対局された棋譜ファイルの読み書きは正式には対応していません。)
- 「指定手数で引き分けとする」のところにTooltipで説明文追加。
    指定手数を超えると引き分け扱いにします。
    コンピューターと対局するときは、「詳細設定」の「MaxMovesToDraw」を
    ここで設定したのと同じ値に変更しておいてやる必要があります。
- 他、対局設定のダイアログの各コントロールにTooltipで説明文追加。
- GlobalConfig、DataContractで書いてなかったの修正。
- MiscSettingに変数EnteringKingRule追加。


- β4に関してβテスターの人たちの意見反映その3
  - エンジンオプション設定をしている時に対局ウィンドウの操作が出来ないようにする。(まふさん)
    - ModalDialogに変更しました。
  - 対局設定でエンジンが選択されていない状態で詳細設定ボタンが押すと落ちる。(masaさん)
    - ModalDialogに変更しました。


- β4に関してβテスターの人たちの意見反映その2
  - 対局設定で先後入替えた時に選択していたプリセットが入れ替わらない件。(masaさん)
    - 修正しました。
  - 対局設定で、同種エンジンを選択している時に、「二級」・「初段」のようにそれぞれ異なるプリセットを選択して
    ダイアログを閉じて、再度対局設定を開いた時に、その値が復元されていなかったの修正。


- β4に関してβテスターの人たちの意見反映その1
  - 32bit環境でメモリ割り当てに失敗する件(うさ親さん)
    - エンジン本体の見積もりが小さすぎるようだ。
    - 各エンジンのWorkingMemory を 30から150に変更。
    - 各エンジン、ビルドしなおし。スレッドあたりのstack 100MB→25MBに変更。スレッド数×25MBを消費するとして計算しなおす。

  - スレッドstack、100MBに設定してコンパイルしてあるのを25MBに変更。
    - 協力詰めで手数が5万手ぐらいになるので大きめである100MBに設定したが、スレッドあたり100MBも消費するので32bit環境ではメモリ割り当て的に厳しい。
    (4スレッドであれば待機スレッド含めて5スレッドあり、スタック用だけで500MB消費する。)
    - Windows10だとメモリを確保しても、実際にそのメモリにアクセスするまで実メモリに割当てするのは遅延されるが、
      Windows7ではそうでもないので馬鹿正直に500MB消費する。つまりは、この理由からWindows7×32bit環境でわりと苦労することになる。
    - xxx_no_sse.exe、Threadsの設定できてない。(うさ親さん)
      - 32bit環境でUSE_SHARED_MEMORY_IN_EVALを有効にする。
      - LEARN undefにしてコンパイルしなおす。
      - 5エンジン×5バイナリ、差し替え。
  - 検討ウィンドウ、lowerboundが++、upperboundが--。いまは逆になっている。(Mizarさん)
    - 修正しました。


■　2018/07/31


- SetupYaneuraOu wip #28(Mizarさんのプルリク)
  β4版をベースにしたインストーラビルド設定ファイル群のたたき台の続きです。
  Microsoft Visual Studio 2017 Installer Projects では KPPT評価パラメータファイルをインストーラに含める際に問題(リソース不足エラー)が起きたため、ビルドツールを WiX Toolset - (Downloads) に変更しました。
  WiX Toolset build tools v3.11.1 がインストーラの作成に必須、 WiX Toolset Visual Studio Extension がインストーラの作成に推奨となります。


■　2018/07/30


- 32bit環境でメモリ割り当てに失敗する件(うさ親さん)
  - エンジン本体の見積もりが小さすぎるようだ。
  - 各エンジンのWorkingMemory を 30から150に変更。
  - いや、これだとまずそう。ThreadStackを設定できるようにしないといけないっぽい。
  - あとで考える。


- β4リリース
  - 本体 : MyShogi201807301550beta4.zip
  - eval : MyShogi201807260000Eval.zip


- さっきの修正で、対局設定の人間/コンピュータのところ、初期値がコンピュータになってしまっている。
  - 先後入替えたとき、「先手」「後手」の文字が入れ替わるの嫌なので都度初期化しているが、
    ユーザーが先手、後手の名前を変更した時は、それが入れ替わって欲しい気もするのだが…。
  - そんなに使うボタンでもないのでまあいいか…。


- β3に関してβテスターの人たちの意見反映その7
  - 時間無制限の時のコンピュータに渡す思考時間設定していなかった件。(tanuki-さん他)
    - go infiniteが渡されている模様..
    - 時間無制限の時はコンピュータ側は1手5秒で指すようにしました。


- β3に関してβテスターの人たちの意見反映その6
  - 対局設定で先後入替えを押した時、CPUのバナーが入れ替わらない。(うさ親さん)
    - 修正しました。
  - 対局設定の「詳細設定」絡みの操作で例外が出る件。(yoiyoi322さん)
    - 手順難しい。エンジン選択した時にまだ詳細設定ボタンが生きているのがおかしいのかな？
    - エンジン選択中に詳細設定押せなくする。エンジン選択中にエンジン選択ボタンも押せなくする。
    - 詳細設定中にエンジン選択ボタンも押せなくする。


- β3に関してβテスターの人たちの意見反映その5
  - 先手5秒/4秒 , 後手5秒/10秒加算　にした時、後手持ち時間使い切ったあと即指しになる。後手の秒読み、エンジンに渡されていない。(masaさん)
    - 秒読みと秒加算の混合ってUSIでは非対応のような気が…。
    - 先手に対してはbyoyomiで渡して、後手に対してはinctimeで渡すようにする。
    - UsiThinkLimitにByoyomiTimeBlackとByoyomiTimeWhite追加。
  - 1手加算のほうを選択していても秒読みの時間が有効であったの修正。
  - 共通設定のNetworkDelay2のデフォルト値を300に変更。
    - この値、1000以上にしていると秒読み1秒設定の時に即指しになってバグかと思う人がいるといけないので。


- tanuki-2018のEngineDefineからEvalShareを削除。


- tanuki-2018のEvalShareの扱い、間違ってる。修正する。
  - ExtendedProtocolにHasEvalShareOptionを追加した。

- tanuki-2018、将棋神でも4スレッドしか使っていない件。(48さん)
  - EvalShareのオプション持ってないのに"engine_options.txt"で無理やり生やして
    Threadsのオプションを上書きしてしまっていた。(調査協力、うさ親さん)
    - やねうら王のほう、修正対応
      - "engine_options.txt"で、optionとしてそのエンジンが持っていないものを指定すると先頭のoptionが破壊されるの修正。
    - tanuki-2018の"engine_options.txt"からEvalShareの行、削除。
    - EvalShare持ってないエンジンに対して、そのエンジンを2つ起動する時のためにHASH計算、きちんとする。
       - してた。


■　2018/07/29


- β3配布
  - 本体 : MyShogi201807290600beta3.zip
  - eval : MyShogi201807260000Eval.zip


- β2に関してβテスターの人たちの意見反映その5
  - 棋譜ウィンドウの横幅を変更できるように。(48さん)
    - メニューの「表示」→「棋譜ウインドウの横幅」を追加。
- Ponder設定、とりま、未実装なので非表示にしておく。


- β2に関してβテスターの人たちの意見反映その4
  - 対局設定で先後入替えを押した時、後手の時間設定を個別にするがオフの時でも時間設定グループがアクティブになる。(masaさん)
    - 修正しました。
  - エンジンの基本優先度下げたほうが良いのでは。(masaさん)
    - AMD-A9 2コアで、これを下げておかないとCPUを使い切っている状況では音声がぶつ切りに。(うさ親さん)
      - デフォルトでプロセス優先度、下げるようにしました。
      - ProcessNegotiator.LowPriorityをデフォルトでtrueに。
  - 対局中に対局メニューでエンジン変更が出来てしまう。(masaさん)
    - メニュー無効化するように修正。
  - 形勢グラフ、デバッグ＆修正が間に合わない気がするのでとりま無効化する。
    - その前に EvalGraphContol,EvalGraphDialogのAutoScale = DPIに設定


- β2に関してβテスターの人たちの意見反映その3
  - 思考エンジンのプリセット、級は「十級」→「10級」のようにアラビア数字で表記するように変更。
  - 後手の時に評価値を手番側から見た評価値にする件。
    - メニューの「表示」のところに用意
    - 「後手番のCPUの評価値表示を反転させるか」
    - よく見たら、デフォルトではエンジンが返しているのは自分から見た評価値だった。(´ω｀)
    - 自分から見た評価値をデフォルトとする。(将棋所と同じ)
    - 検討ウインドウに出力している評価値、保存していないので、即時反映は出来なくて、次の出力以降が反転表示される。(いずれなおすかも)


- β2に関してβテスターの人たちの意見反映その2
    - レーティング公式、修正。(uuunuuunさん)
      - これにより、5級あたりが少し強くなり、9段あたりは少し弱く調整される模様。
    - NodesLimit = 1000*Exp[(537-Sqrt[537^2 + 4*26.13(975-rate)]/(2*26.13))]
        // Excelの式で言うと　=1000*EXP((537-SQRT(537^2+4*26.13*(975-A1)))/(2*26.13))
    - 九段～十級まで用意した。
- WIP.mdに見出し追加。


- β2に関してβテスターの人たちの意見反映その1
  - 32bit環境で思考エンジンがメモリ割り当てに失敗することがある。(Wandre-sakさん)
    - 32bit環境、1プロセスが2GBまでしか使えないのでHASH割当の計算をするときに空き物理メモリ2GBとして計算すべき。
    - 空き物理メモリを取得する部分で32bit OSでは、空き物理メモリの値を最大でも2048MBとして扱うようにした。
  - メニュー項目にアクセスキーを設定する。(kumaさん)
    - 対応しました。
- LocalGameServerのスレッドで落ちた時に例外の捕捉が出来ていなかったの修正。
  - LocalGameServerのスレッドで落ちた時にもスタックトレースがちゃんと表示されるようになった。


■　2018/07/28


- β2配布
  - 本体 : MyShogi201807280620beta2.zip
  - eval : MyShogi201807260000Eval.zip


- β1.1に関してβテスターの人たちの意見反映その3
  - 検討ウィンドウの「着順」「R順」も解像度によって少し見切れる件(48さん)
    - ボタン少し大きくした。
  - 棋譜の名前をつけて保存でデフォルト値を「先手名後手名_YYYYMMDDHHmmss.kif」にして欲しい。(ぐららるさん)
    - 対応しました。
- ファイルを保存する時にファイル名をescapeするようにした。(エンジン名にファイルに使えない文字列が含まれている可能性があるため)
  - Utility.EscapeFileName()追加。
- EngineConsiderationDialog.cs、VSのデザイナで開くとぬるぽで落ちてたの修正。


- tanuki-2018、no sse版を含めてビルドできたっぽい。差し替える。
  - YaneuraOu2018NNUE_nosse.exe
    - build失敗。原因調査中。
    - Mizarさんに調査依頼。
    - 原因判明。

      makefileを使ってcleanするときに、.oファイルを削除しないといけないが、そのときにYANEURAOU_EDITIONを指定していないと
      コンパイル対象のソースファイルとしてNNUE用の評価関数のソースコードファイルが追加されず、.oファイルが全部消えないので
      コンパイルに失敗することがある。cleanするときは、この点に注意すること。

      mingw32-make clean YANEURAOU_EDITION=YANEURAOU_2018_TNK_ENGINE



■  2018/07/27


- β1.1に関してβテスターの人たちの意見反映その2
  - 対局設定ダイアログがまだ見切れる件。(うさ親さん)
    - AutoScaleFixerうまく動いてない。ClientSizeもリサイズする…。
    - InitializeComponet()抜けるときにResumeLayout()呼ぶからその瞬間にレイアウト変更がされて、ClientSizeが適用されて、現在の画面サイズに収まらないからリサイズが発生しているのでは…。これは死にそう..。
      - これは悪いアイデアだった。仕方ないので96dpi環境でVSのデザイナを使うことにする。

        public static void Init(Form form)
        {
            form.SuspendLayout();

            // 元のscalingと変更後のscaling
            var org_scale = form.AutoScaleDimensions;
            var new_scale = new SizeF(96F, 96F);

            // scale_x == scale_yのはずではあるが、一応分けておく。
            var scale_x = new_scale.Width / org_scale.Width;
            var scale_y = new_scale.Height / org_scale.Height;

            // 全体的に(すべての子Controlに対して)このScale変換を適用してやる。

            void ResizeControls(Control.ControlCollection controls)
            {
                if (controls != null)
                {
                    foreach (Control c in controls)
                    {
                        c.Location = new Point((int)(c.Location.X * scale_x), (int)(c.Location.Y * scale_y));
                        c.Size = new Size((int)(c.Size.Width * scale_x), (int)(c.Size.Height * scale_y));
                        c.ClientSize = new Size((int)(c.ClientSize.Width * scale_x), (int)(c.ClientSize.Height * scale_y));
                        c.Margin = new Padding((int)(c.Margin.Left * scale_x), (int)(c.Margin.Top * scale_y), (int)(c.Margin.Right * scale_x), (int)(c.Margin.Bottom * scale_y));

                        // 子コントロールの子コントロールにもこれを適用するために再帰的に処理しておく。
                        // →　コントロールには、AutoScaleDimensionsというプロパティがないため、ここに書いてある問題は起きないっぽい。ほんまかいな…。

                        //ResizeControls(c.Controls);
                    }
                }
            }
            ResizeControls(form.Controls);

            form.AutoScaleDimensions = new_scale;

            form.ResumeLayout();
        }

      - MyShogi201807271800beta1.1a.zip


- β1.1に関してβテスターの人たちの意見反映その1
  - エンジンオプションダイアログの「前ページ」「次ページ」が見切れる環境があるらしい。(島田さん)
    - 11pt→9ptに変更。
  - BookDirエンジン設定の変なところにあるの修正。
    - エンジンオプションの共通設定にBookDir追加。
    - EvalDirのほうの説明文、追記。


- β1に関してβテスターの人たちの意見反映その2
  - 対局設定ダイアログ、1366×768の環境で見切れる。(うさ親さん)
    - AutoScaleの修正クラス作成。
      - AutoScaleFixer.cs
- とりま、これをβ1.1としてリリース。
  - β1.1
    eval : MyShogi201807260000Eval.zip
    本体 : MyShogi201807271630beta1.1.zip


- β1に関してβテスターの人たちの意見反映その1
  - エンジン選択ダイアログの下部ボタンの「次ページ」「前ページ」の文字が見切れている環境がある。(yoiyoiさん)
    - 文字フォントサイズを縮小。「選択」の文字も14→12ptに。
  - 32bit環境用の実行ファイル名が"XXX_no_sse.exe"を読みに行っているが、"XXX_nosse.exe"しか用意されていない件。(うさ親さん)
    - 32bit環境ではどれも実行できない状態でした。(´ω｀)
    - 後者のファイルを読みに行くように修正。
  - Mizarさんからのバグ報告をWIP.mdに追加。
- インストーラー用のアイコンをDebug/image/に移動。


- デバッグ用に例外が出た時のダイアログを有効にしてβ版としてテスターに配布。β1
  - β1
    eval : MyShogi201807260000Eval.zip
    本体 : MyShogi201807270940beta1.zip


- preset (段位ごとの強さ)の調整
  uuunuuunさんの実験によるとthreads = 4で、
    rating =  295.14 ln( nodes/1000) + 1319.8
  の関係があるらしいのでここからnodes数を計算。
  ratingは将棋倶楽部24のものとする。またlnは自然対数を意味する。
  - 九段～五級まで設定した。
  - presetの適用されるものが1つずれていたの修正。
  - 下の方はあまり自然な弱さになってない気がする。評価関数によって性質が違うのかな？


- WIP.md追加


- tanuki-(2018)の各CPU用の実行ファイルを用意。
	- build
		mingw32-make clean
		mingw32-make -j8 avx2 COMPILER=clang++ YANEURAOU_EDITION=YANEURAOU_2018_TNK_ENGINE
	  - buildうまくでけへん。吐きそう。
      - pacmanしたらnosse以外はbuildできたっぽい。
    - YaneuraOu2018NNUE_avx2.exe
    - YaneuraOu2018NNUE_sse42.exe
    - YaneuraOu2018NNUE_sse41.exe
    - YaneuraOu2018NNUE_sse2.exe
      - ここまで出来た。
    - YaneuraOu2018NNUE_nosse.exe
      - まだ


- やねうら王(2018)の各CPU用の実行ファイルを用意。
	Yaneuraou2018_kpp_kkpt_avx2.exe
	Yaneuraou2018_kpp_kkpt_sse42.exe
	Yaneuraou2018_kpp_kkpt_sse41.exe
	Yaneuraou2018_kpp_kkpt_sse2.exe
	Yaneuraou2018_kpp_kkpt_nosse.exe


- 形勢グラフのレイアウト調整・インストーラ設定たたき台 (Mizarさんのプルリク #27)
	* .editorconfig
	* 形勢グラフ: レイアウト調整
	* YaneuraOuSetup


- 各思考エンジンの各CPU向け実行ファイルの用意
	- 各思考エンジンの各CPUでの動作検証
- tanuki-(SDT5)用,Qhapaq(2018)用,読み太(2018)用に実行ファイルを用意
	- YaneuraOu2018KPPT_avx2.exe
	- YaneuraOu2018KPPT_sse42.exe
	- YaneuraOu2018KPPT_sse41.exe
	- YaneuraOu2018KPPT_sse2.exe
	- YaneuraOu2018KPPT_nosse.exe
- エンジンから"info string"が送られてきた時の検討ウィンドウへの表示処理実装
	- 定跡の表示がややおかしい気はする。
- 検討ウィンドウのHASH使用率、横幅狭かったので広げた

- 各思考エンジン用の定跡ファイルの用意
	- book/standard_book.db
	- book/yaneura_book1.db
	- book/yaneura_book3.db
	- book/yaneura_book4.db
	- 定跡一つ見つからない。あとで探してくる。
		- book/yaneura_book2.db


- やねうら王の思考エンジンのほうの改修
	- BookDir option追加
		- https://github.com/yaneurao/YaneuraOu/commit/315dd4b42120a824c09d394a28c044fcaa6f9417
	- 起動時に、"engine_option.txt"を読み込み、Optionsに反映するように。
		- https://github.com/yaneurao/YaneuraOu/commit/2458e32e518438db19cea57239e77b1864aeed14
	- エンジンが読み込むべき評価関数、フォルダをeval/で固定すべき。エンジン側に"eval_dir.txt"でEvalDirのデフォルト値を読み込むような何かが必要だ。
		- 共通設定に"EvalDir"は存在すべきではない気がする。


■  2018/07/26


- ponder(相手番のときに思考する)の処理その2
	- Ponderの設定の反映
		- ponder設定、エンジンオプションで設定するようにしてしまうと、先後両方がエンジンのときはponderしない、というような
		ことがしにくくなってしまう。そう考えるとponderは、対局設定ダイアログで設定できるべきのような気はする。だから
		思考エンジンのオプション設定にはponder設定について表示しないようにする。
		- エンジンに対してこの設定をHideするように。
- 定跡ファイルは book/ , 評価関数ファイルは、 eval/ 配下に配置するように。
	 - 評価関数を配置
		d-----       2018/07/25     23:53                qhapaq2018_kppt                                                       
		d-----       2018/07/25     23:52                tanuki2018_nnue                                                       
		d-----       2018/07/25     23:52                tanuki_sdt5_kppt                                                      
		d-----       2018/07/25     23:52                yaneuraou2018_kppkkpt                                                 
		d-----       2018/07/25     23:53                yomita2018_kppt   
	- 評価関数
		- 読み太 KPPT
		- Qhapaq KPPT
		- ぽんぽこ KPPT
		- tanuki-2018 NNUE
		- やねうら王 KPP_KKPT


- ponder(相手番のときに思考する)の処理その1
	- 対局設定ダイアログにPonder設定追加。
	- PlayerSettingにPonder追加。


■  2018/07/25


- Mizarさんのプルリクをマージ
	* 対局オプション「時間切れを負けにしない」でエンジンの思考時間が無制限になっていた
	* 後手のフィッシャー加算時間がエンジンに0と通知されていた
	winc前の空白が抜けていた
	* GameScreenControlEventHandler: コメント追記
	* 形勢グラフウィンドウの実装
	* 形勢グラフウィンドウ名の修正


- とりま、出来たこと。
	・エンジンごとの選択されたpresetの保存/(次回起動時の)復元
	・思考エンジンの共通設定のダイアログ作成
	・思考エンジンの共通設定の保存～復元
	・思考エンジンの個別設定ダイアログの作成
	・思考エンジンの個別設定を思考エンジンから取得するコード
	・思考エンジンの個別設定の保存/復元
	・思考エンジンのCPU判別
	・思考エンジンの設定のページャー実装
	・思考エンジンの個別設定の内容の思考エンジンへの反映
	・思考エンジンの共通設定の、各思考エンジンへの反映
	・presetの思考エンジンへの反映


- エンジン設定の作業その43
	- 自動HASHの計算、リファクタリング
		- 計算されたHASHの値、反映してなかったの修正。
	- UsiEngineHashManager、リファクタリング。
	- 自動スレッド設定
		 - 計算する部分書けた
		 - 反映する部分書けた。適切に反映してる。
		 - 両方のエンジンが両方ともponder設定になっている場合、自動スレッドによるスレッド数は、OSが返したコア数の値の1/2にすることにした。
		 - Ponderの実装してからしか、スレッドのPonderの反映が出来ない。次はPonderの実装する。


■  2018/07/24


- USI2.0.md更新 USI_PonderとUSI_Hashの送信を強制するように。


- エンジン設定の作業その42
	- 思考エンジンのHASHメモリの自動マネージメント
	- エンジン設定で、HASH用とEVAL用とWORKで使用メモリ分ける。
	- All.IntColors()追加。
	- 自動Hashの値がエンジンに反映されるようになった。
	- 自動Hashの計算した値をログに出力するようにした。
	- Hash、物理メモリの自動マネージメント
		- 完了
- USI2.0では、USI_Hash , USI_Ponder、エンジン側から送ることを強制する。


- エンジン設定の作業その41
	- 思考エンジンのHASHメモリの自動マネージメント
		- LocalGameServerがEngineDefineExを持たせる。
			- この設計よくなかった。
			- UsiEngineHashManager追加。
		- Hashサイズの自動計算のためのコードを書く。
			- かなり大変。7割ぐらい書けた。
	- CPU→CpuTypeにrename



■  2018/07/22


- エンジン設定の作業その40
	- optionがきちんと渡ってきているかのテスト
		- 共通設定
		- 個別設定
		- preset
			- 一応反映されているっぽい。
	- presetのテストをするためにgpsfish2 に対してプリセットを用意。
	- presetのスレッドのオプション名がThreadになっていたのThreadsに修正。
	- UsiOptionのToString()、もう少しダイレクトに表示するように変更。
	- Gpsfishのinstanceがまた走っていたの修正。
	- 検討用エンジンを変更できるように準備。


■  2018/07/20


- エンジン設定の作業その39
	- 共通設定のところハッシュ割合の項目が消えてたの修正
	- エンジンオプションの文字フォントサイズ調整。
	- エンジンオプションの個別設定のレイアウト調整
- エンジンオプションのダイアログ、high dpiでおかしくなるらしい。
	 - FontBuilder作成。Fontの生成を抽象化する。
		 - このアイデア良くなかった。
	 - 単にエンジンオプション設定のFont生成部、調整する。



■  2018/07/18


- エンジン設定の作業その38
	- エンジン共通設定のHash、Threadsまわりの説明文、追記。


■  2018/07/17


- エンジン設定の作業その37
	- エンジン詳細設定のオプションが保存されているかのテスト
		- やねうら王は保存されているがgpsfishは反映していないみたい。
		- EngineOptionForSettingにToString()追加。
		- EngineOptionForIndivisualにもToString()追加。
		- gpsfishの個別設定が保存されていなかった件、修正。
		- gpsfishの個別設定でMultiPVの説明文が出て欲しい気はする。
			- gpsfishの個別設定にMultiPV追加。「思考設定」追加。
			- gpsfishの個別設定に「その他」の見出しを追加。
- ListExtensions追加。ReverseIterator追加。


- エンジン設定の作業その36
	- エンジン設定ダイアログのCaptionに「エンジンオプション設定(通常対局用)」のように設定種別を表示するようにした。
- tanuki詰将棋エンジンのバナー受け取った。
	- engine/tanuki_mate/banner.png 配置


- エンジン設定の作業その35
	- 詳細設定ダイアログを出した時に詳細設定ボタンをDisableにする。
	- 詳細設定ダイアログのtab pageのTextにエンジン名を表記するように。


■  2018/07/15


- エンジン設定の作業その34
	- 例外ダイアログ、captionを表示するほう、メインウインドウの破棄時に呼び出されるとまずかったの修正。
	- 検討ウィンドウ、×ボタンで非表示にするの、閉じるのをcancelしているので他の場所から終了できなくなってしまう。まずい気がする。
	- 検討ウィンドウを出しているとメニューから閉じられなかったの修正。
	- EngineOptions、null checkうざすぎる。typedefしたい。どうしたものか…。
		- EngineOptionsとEngineOptionsForIndivisual廃止する。
		- メンバとしてList<X>しか持たないclassを定義するの、シリアライズ/デシリアライズしないといけない状況だとよろしくないという学びを得た。


- エンジン設定の作業その33
	- UsiOptionMin削除。これ使わない。
	- 思考エンジンの個別設定の内容の思考エンジンへの反映
	- 思考エンジンの共通設定の、各思考エンジンへの反映
	- presetの思考エンジンへの反映
	- 選択した思考エンジンが起動するようにした。(現状、gpsfishしか入れてないのでそれしか起動しない)
	- 検討モードの時の検討ウィンドウに出るエンジン名はエンジン表示名に変更。


■  2018/07/13


- 詰将棋エンジンのバナーも必要な気がしてきたので発注。


- エンジン設定の作業その32
	- エンジン個別設定の名前が長い時に16文字ぐらいで切る処理追加。GPS将棋で必要。
		- String.Left()バグってた。修正。
	- 個別設定の画面、共通設定にも存在する項目だけチェックボックスを出すように修正。
	- 個別設定の画面、GPS将棋でHASH_が２つ出るの修正。(GPS将棋、USI_HashとHashと２つoptionを持っていたのが原因)
	- GPS将棋のような外部エンジンに対してHashとThreadの自動マネージメント機能を提供する。
	- 個別設定画面でのDisplayNameの字下げわかりにくかったので廃止。


- エンジン設定の作業その31
	- エンジン設定ダイアログ、横幅750→775に広げた
	- 個別設定で共通設定に従うチェックボックスの追加
		- 説明文追加。
		- チェックボックスにチェックが入っている時は、その右側にある項目をグレーアウトするようにした。
	- 個別設定の保存/復元
		- 通常対局、検討エンジン、詰将棋エンジンに対する、共通設定と個別設定のclass設計をした。
			- EngineConfigs
		- EngineOptionSettingDialogBuilder作成、コード分離
	- 個別設定のControl、更新中はSuspendLayout()を呼ぶようにした。
	- 個別設定の保存/復元できた。
	- 個別設定の左のラベルをクリックしても左端のチェックボックスのオンオフが出来るように。
            // …ようにしようと思ったら、label1がEnable == falseになってしまうので
	        // このクリックイベントが発生しなくなるのか…。うーむ、、そうか…。
- 検討エンジンの設定、対局時の設定そのままでええんかな…。検討時には定跡をオフにしたいとかあるかも。
	- 検討エンジンの選択ダイアログが必要なような…。
		- 共通設定と個別設定が必要なような…。
	- 詰将棋エンジンのオプション設定も必要なような…。



- エンジン設定の作業その30
	- エンジン設定のコンボボックスの文字フォント、もうひと回り小さく。
	- エンジン設定で配置している短い説明文の手前、少しスペースあける。
	- エンジン共通設定に項目追加。
		- MultiPV , Contempt , ContemptFromBlack追加。
		- PvInterval , ConsiderationMode , OutputFailLHPV 追加。
		- 定跡設定
			option name BookMoves type spin default 16 min 0 max 10000
			option name BookIgnoreRate type spin default 0 min 0 max 100
			option name BookEvalDiff type spin default 30 min 0 max 99999
			option name BookEvalBlackLimit type spin default 0 min -99999 max 99999
			option name BookEvalWhiteLimit type spin default -140 min -99999 max 99999
			option name BookDepthLimit type spin default 16 min 0 max 99999
			option name NarrowBook type check default false
			option name ConsiderBookMoveCount type check default false
		- 設定項目、日本語化は、これですべて終わり。
	- エンジンオプション関連の残り作業
		- 個別設定で共通設定に従うチェックボックス
		- 個別設定の保存/復元
		- 共通設定・個別設定の思考エンジンへの反映


- エンジン設定の作業その29
	- 対局設定で思考エンジンが選択されていない時は詳細設定ボタンを無効化するように修正。
	- WindowsServer 2012R2で動かすとエンジンオプションとかすごく小さい。なんぞこれ…。
		TextBoxのFontの生成がおかしいのか。
		TextBoxのデフォルトフォントが"MS UI Gothic, 9pt"になっているが、これがdpi scalingの影響受けている。
		この.NET Frameworkの実装ひどすぎない？
		- .NET Framework 4.6以降ならこれでいけるのか？app.configで
			<appSettings> 
			<add key="EnableWindowsFormsHighDpiAutoResizing" value="true" /> 
			</appSettings>
		- cf. https://blogs.msdn.microsoft.com/visualstudio_jpn/2015/07/20/net-framework-4-6/
		- これでなさげ。
		- フォントが、
		"UI Gothic, 9pt"　→　high dpiの影響受けて小さくなる , デフォルトフォントなのに…。
		"MS UI Gothic, 9pt"　→　いける(scalingされる) ということのようだ。なんぞこれ。
		- ああ、わかった。デフォルトフォントだと、Fontクラス作って代入されなくて、それでまずいのか。
		明示的に代入するようにしたらうまく動いた。そうか…。
		- エンジンオプションの画面、フォント指定しなおした。
	- 検討ウィンドウのListViewもフォント指定しなおす。
		- Windows Server 2012 R2でもうまく表示されるようになった。



- エンジン設定の作業その28
	- エンジン個別設定で、先後で同じ思考エンジンを選択した時に、別の設定に出来る必要があるのだろうか…。
		- これ出来ない。したいなら、engine配下のフォルダをコピーして解決して欲しい。
		- エンジンごとに設定を持っているので、これは仕様ということで仕方がない。
	- エンジンオプション設定ダイアログ、もう少し縦長に変更。
	- エンジン個別設定の1ページの項目数がきちんと決まっていないの修正。
	- エンジン設定のところ、見出し前に対して水平線追加
	- エンジン個別設定の日本語化進める
		- BookOnTheFly , SlowMover , ResignValue追加。


- エンジン設定の作業その27
	- エンジン個別設定のコード色々書いた。だいたいうまく動く感じになった。
	- エンジンオプションの日本語説明文を追加していく。
	- エンジン設定ダイアログで最後のページに何もコントロールが表示されていない(ちょうど設定項目がなくなる時に1ページ余分に表示される)バグ修正。
	- エンジン設定ダイアログの項目のページわけ調整。
	- エンジン共通設定にデバッグ用の項目追加。
		- Param1 , Param2をHide設定に。
		- 「着手遅延設定」追加。
		- 「思考時間設定」追加。
		- 「入玉設定」改め「持将棋の設定」
			- 引き分けの手数もここに。
		- 「評価関数の設定」追加
			- EvalShareはdefault trueに変更。これtrueで問題ないやろ。
			- よく考えると空き物理メモリの計算の時、EvalShare考慮する必要あるのか…。これわりと面倒なのでは…。
	- 日本語化、半分ぐらい終わった。


- エンジン設定の作業その26
	- エンジン個別設定のほう、日本語化していく。
	- GPS将棋に対して詳細設定で落ちるの修正。
		- EngineDefine.IsSupported()追加。
	- option名 Thread 間違い→　Threadsに変更。
	- エンジン個別設定のほう、エンジン共通設定のDescriptionを持ってきた。
	- エンジン共通設定にハッシュ、スレッド、入玉設定まで表示できた。
	- 自動ハッシュの設定、エンジン個別設定でも出来ないといけないのか…。あとで考える。


- エンジン設定の作業その25
	- エンジン設定、comboboxを日本語化する。
	- EngineOptionDescriptionにComboboxDisplayNameとHide追加。
	- ComboBoxの日本語化、うまく行った。
- ControlBinderのunbind、きちんと呼び出すようにした。



■  2018/07/12


- エンジン設定の作業その24
	- エンジン共通設定に従う設定であっても、エンジン個別設定のほうの値域を守らないといけないという話はあるか…。まあいいか…。
	- エンジン個別設定で、エンジンから送られてきたoption USI_Ponderは無視する。
		- この項目はGUI側のponder設定に従うべき。
		- 同じく、Hash,USI_Hashは統合されるようにした。
	- エンジンオプションのページャー、大変すぎない？
		- そうでもなかった。ページャー実装完了。


- USI2.0.md更新
	- ハッシュ用のメモリを透過的に扱うためには、USI2.0にUSI_Hashの代わりにHashを使うという拡張が必要。
	- UseHashCommandExtension追加


- エンジン設定の作業その23
	- EngineOptionを共通設定用と個別設定用に分離した。
	- オプションの共通設定のところに定跡設定・入玉設定追加。
	- ページの代わりに垂直スクロールにしたら波打った。ページャー実装する。
	- 前ページボタンと次ページボタン追加。
		- ボタンとテキストボックスをControlの大きさに追随するコード実装。
	- comboboxの内容も、日本語化したほうが良いのでは…。
		- 考える。


- 更新履歴.txt 更新


- エンジン設定の作業その22
	- エンジン共通設定のところに定跡の選択項目追加。
		- あー、これ選択された定跡によって他のオプション設定変わるのか…。
		- これわりと大変なのでは…。
	- エンジン設定のところ、comboboxサポート。
	- エンジン設定のところ、textboxサポート
	- エンジン設定の説明のテキストボックス、垂直スクロールバー追加。

	- 作業対象 option項目

		option name USI_Ponder type check default false
			 // この値は、GUIのponder設定に従うべき。
		option name USI_Hash type spin default 256 min -9223372036854775808 max 9223372036854775807
			 // この値は無視される
		option name Hash type spin default 16 min 1 max 1048576
			// これはUSI拡張でこちらを使うことになっているので問題ない。

		option name Threads type spin default 4 min 1 max 512
			// スレッド設定

			// デバッグ用
		option name WriteDebugLog type check default false
		option name Param1 type spin default 0 min 0 max 100000
		option name Param2 type spin default 0 min 0 max 100000

			// 思考時間設定
		option name MinimumThinkingTime type spin default 2000 min 1000 max 100000
		option name NetworkDelay type spin default 120 min 0 max 10000
		option name NetworkDelay2 type spin default 1120 min 0 max 10000

			// 持将棋の設定
		option name EnteringKingRule type combo default CSARule27 var NoEnteringKing var CSARule24 var CSARule27 var TryRule
		option name MaxMovesToDraw type spin default 0 min 0 max 100000

			// 定跡
		option name BookFile type combo default standard_book.db var no_book var standard_book.db
			var yaneura_book1.db var yaneura_book2.db var yaneura_book3.db var yaneura_book4.db var user_book1.db var user_book2.db var user_book3.db var book.bin
		option name BookOnTheFly type check default false

		option name BookMoves type spin default 16 min 0 max 10000
		option name BookIgnoreRate type spin default 0 min 0 max 100
		option name BookEvalDiff type spin default 30 min 0 max 99999
		option name BookEvalBlackLimit type spin default 0 min -99999 max 99999
		option name BookEvalWhiteLimit type spin default -140 min -99999 max 99999
		option name BookDepthLimit type spin default 16 min 0 max 99999
		option name NarrowBook type check default false
		option name ConsiderBookMoveCount type check default false

			// 評価関数
		option name EvalDir type string default eval
		option name EvalShare type check default false

			// 思考設定
		option name MultiPV type spin default 1 min 1 max 800
		option name Contempt type spin default 2 min -30000 max 30000
		option name ContemptFromBlack type check default false
		option name ResignValue type spin default 99999 min 0 max 99999
		option name SlowMover type spin default 100 min 1 max 1000

		option name DepthLimit type spin default 0 min 0 max 2147483647
		option name NodesLimit type spin default 0 min 0 max 9223372036854775807
		option name nodestime type spin default 0 min 0 max 99999

			// 読み筋の表示
		option name PvInterval type spin default 300 min 0 max 100000
		option name ConsiderationMode type check default false
		option name OutputFailLHPV type check default true

			// 非表示にしておく。
		option name SkipLoadingEval type check default false
		option name EvalSaveDir type string default evalsave




- エンジン設定の作業その21
	- エンジン個別設定をエンジンの実行ファイルを起動して取得するコード追加。
	- エンジン接続時のエラーメッセージをわかりやすく変更。
	- UsiOption.CreateOptionCommandString追加。
	- エンジン個別設定がエンジンから取得したものが表示できるようになったが、項目多すぎて入りきらん…。
		- Pager必須なのか。禿げそう。
		- ちょっと考える。
	- エンジン個別設定画面作成
		- EngineOptionSettingControlに追加。
		- エンジンに対して"usi"コマンドを送信して、option項目をもらって、parseする部分を書く。


- エンジン設定の作業その20
	- エンジン共通設定の内容を保存するコード/復元するコードを書く。
		- できた。
	- EngineOptionForSetting : NotifyObjectにする。
	- ControlBinderにComboBox,NumericUpDownをstringのpropertyとbindするコード追加。
	

- エンジン設定の作業その19
	- エンジンオプションに短い説明と長い説明が必要なような…。
		- DescriptionとDescriptonSimpleとわける。
	- エンジンオプションの共通設定画面実装
		- NumericUpDownの上限、下限値をUsiOptionから取得して設定するコード追加
		- CheckBox生成
		- 詳細説明文のテキストボックス追加
			- マウスのhoverに対して表示されるように。
		- 「ハッシュメモリ設定」「スレッド設定」追加。


■  2018/07/11


- エンジン設定の作業その18
	- Option、結局共通設定用と個別設定用とプリセット用と3つ必要だという結論になった。
	- 共通設定と個別設定は1つにまとめた。EngineOption.csに用意した。
	- 共通設定をEngineOptionSettingControlで少し表示出来るようになった。
		文字列がはみ出たりするので改行の処理とか何とか必要ではなかろうか…。
		- 少し考える。


- エンジン設定の作業その17
	- エンジン共通設定ダイアログ、個別設定ダイアログ
		- EngineCommonOptionSettingControl
		- EngineIndivisualOptionSettingControl
		に分けておいて、
		- EngineOptionSettingDialogにtabとして貼り付けるか…。
		- いやー、よく考えたら、共通のControlでいいのか。
			エンジン個別のほうに「共通設定に従う」のチェックボックスがあればそれで良しと…。
		- EngineOptionSettingControl作成。
		- EngineOptionDialog作成。Tab作って貼り付ける。
	- UsiOptionとEngineOptionクラスとの兼ね合いが難しいな。少し考える。


- エンジン設定の作業その16
	- EngineConfigUtilityの実装追加。保存～復元。
	- EngineConfig、TheAppに追加。終了時の保存追加。遅延読み込み実装。
	- 完了) エンジンごとの選択されたpresetの保存/(次回起動時の)復元


- エンジン設定の作業その15
	- エンジンごとに個別に選択しているpresetを保存するように。
	- エンジンごとの個別設定を保存するように。
	- "MyShogi.engine.xml"追加。
		- ファイル名あまり長くなるの気持ち悪いのでこれくらいで。
		- "MyShogi.setting.xml"は使っているので、ファイル名に"setting"を入れると紛らわしい。
	- UsiEngineConfig.cs追加。
	- EngineOption.name , valueをName , Valueにrename。
	- EngineConfig追加。EngineConfigUtility追加。
	- EngineDefine、DataContract、arrayとListで同じなので、arrayやめてListに変更しとく。
	- EngineConfigUtilityの実装まだ。あとで書く。


- エンジン設定の作業その14
	- 対局設定ダイアログでpresetを選択した時に、その説明文を表示するようにした。


- エンジン設定の作業その13
	- エンジン選択時に、プレイヤー名をエンジンのDisplayNameから取得して対局ダイアログに設定するように。
	- 対局設定の氏名を対局盤面のネームプレートの表示名に
	- 棋譜保存のときに対局者名を保存
		- されてた。
	- 対局設定で人間←→コンピュータの切り替えでプレイヤー名を
		コンピュータ名、「先手」/「後手」に変更されるように。
	- 対局設定でエンジンを選択した時に対局相手を「コンピュータ」に自動的に変更する処理追加。
	- 対局設定でエンジンを選択していない時に「コンピュータ」を選んだ時にエンジン選択ダイアログを出すように変更。
- メニューの「ファイル」が無効になっていたの修正。

- エンジン設定ダイアログ、最後96dpiで編集。
	- しなくてよさげ
	- .NET Frameworkのバグだったのだろうか…。


■  2018/07/10


- エンジン設定の作業その12
	- GameSettingDialogの先手用、後手用の分、別コントロールにしたほうが良いのでは…。
		- 分離を試みる。
			- GameTimerSettingControl
			- GamePlayerSettingControl
		こうしよう。
	- 対局設定ダイアログ改造
		- 詳細設定ボタン削除
		- プリセットに対する説明追加。
- tanuki-2018年版の説明にCPU温度の説明文追加。


- presetに各段位ごとのDescription追加
- presetにカスタム追加。


- No Banner素材、差し替え。


- エンジン設定の作業その11
	- 対局設定ダイアログで、選択したエンジンと選択したプリセットが次回起動時に再現されるようにした。
	- 対局設定ダイアログで、コンピュータが選ばれていないときにコンピュータと対局しようとするときエラーダイアログを出すようにした。
- EngineDefineにpathくっつけた構造体が必要だな
	- EngineDefineEx追加
- EngineDefinの読み込み、遅延読み込みに変更。



■  2018/07/09


- aboutダイアログとシステム情報ダイアログをメインウィンドウの前面に来るようにした。


- エンジン設定の作業その11
	- メモリ足りない時に警告出す処理追加
	- 対局設定ダイアログ、エンジン選択ダイアログにTopMost指定するのやめる。
		- メッセージダイアログが最前面になって欲しいのにならない。
		- Showのときに親指定するか…。
		- 対局設定ダイアログ、親指定した。
	- 対局設定ダイアログの最大化と最小化のボタン、なくす。


- エンジン設定の作業その10
	- 対局設定のエンジン選択ボタンをこのエンジン選択ダイアログと紐づける。
		- エンジン選択のボタンを押した時に反映するところまでは出来た。
	- 対局設定ダイアログのViewModelにEngineDefineを持たせてそれを反映するようにした。
	- 対局設定ダイアログへのエンジンのPresetsの反映、まだ。GlobalConfigに保存するのもまだ。


- エンジン設定の作業その9
	- エンジン選択ボタンのハンドラの実装
	- うまく動いているようだ。これでエンジン選択ダイアログは完成。
	- あとは対局設定のエンジン選択ボタンをこのエンジン選択ダイアログと紐づけて…。
- PropertyChangedEventArgsにsenderが必要だと思った。NotifyObject改造した。


- 検討ダイアログでranking順に並び替えた時にちらつく件、調査。
	- ListView.Items[n] = itemとする限りはちらつくので部分更新するように変更。
	- ちらつかなくなった。なんなんだ、このバッドノウハウ。


- NotifyObjectによるControlとのbinder、開発する。
	- 旧ControlBinder削除
	- 新ControlBinder、Model.Common.ObjectModelに追加。
	- 新しいControlBinderで対局設定ダイアログのコード、リファクタリングする。
		- 大改造になった。ソースコードはだいぶ見通し良くなった。
- NotifyObjectでhandlerすべてRemoveしたときにpropertyのremoveまでやってたの修正。


- エンジン設定の作業その8
	- エンジン選択ダイアログのpager実装。
	- バナーがない時のNoBannerの表示実装
		- NoBannerの素材がないので発注。
	- NoBanner、ImageMangerに追加。
- ImageManager、素材が増えてくると起動遅くなるので、遅延読み込みちゃんとサポートしたほうがいいのでは。
	- ImageLoader、ImageManagerを遅延読み込みに対応。
	- 起動わずかに早くなった。(気がする)


- readme.mdにスクリーンショット掲載(やねうら王の公式ツイッターから)


- USI2.0.md追記


- USI2.0.md更新


■  2018/07/08


- NotifyObjectの双方向データバインディング、無限再帰になるわｗ
	- senderつけるようにした。
- KifuControl、データバインディングを使って少しリファクタリングした。


- NotifyObject同士のdata bindが出来るように改造した。
	- あとでこれを使ってリファクタリングする。


- NotifyObject、リファクタリングする。
	- LazyLock、いけてないので削除する。
	- NotifyObject 新しくなった。コード、すっきりした。


- エンジン設定の作業その7
	- エンジン側で発生した例外、LocalGameServerでハンドルするようにした。
		- ゲーム自体は中断扱い。
	- EngineSelectionDialogの実装作業
		- 8割ぐらい終わった。ページャーあとで作る。
	- EngineDefineUtility.GetEngineDefines()追加。
		- これ、Appで行う。
	- エンジン選択ダイアログで表示順のコントロールをしたい。
		- DisplayIndexという項目追加する。


■  2018/07/07


- エンジン設定の作業その6
	- エンジン同士の対局開始、エンジン初期化中の画像が出ているときに片側のエンジンが指すの修正。
	- 検討ウィンドウの縦幅を縮めるとnull参照で落ちるの修正。


- エンジン設定の作業その5
	- AutoSetting　→　Presetsとrename
	- 起動時にengine/を調べるコードEngineDefineUtilityに追加。GetEngineDefineFiles()
	- EngineDefineにDescription追加。
	- EngineDefineに従って設定を描画するEngineSelectionControlを追加。コード書きかけ。
	- NotifyObject派生クラス、～ViewModelとrename
	- NotifyObjectの部分更新機能、不要な気がしてきたので削除。
	- View.Win2D、フォルダ作って整理。


- エンジン設定の作業その4
	- SerializerにDataContractSerializerを使っているが、JSONのほうが良くないかな…。DataContractSerializerだと手で書けない。
		- まあいいか…。他の環境についてはまた考えよう。DataContractSerializer相当のものを自作するのはそんなに難しくないので…。
	- CPUのコア数取得、Model.Utility.Enviromentに追加。
	- 空きメモリの取得、Model.Utility.Enviroment.GetFreePhysicalMemory() 実装
	- CPU自動判別、CPUのコア数、空きメモリ等の自動認識(1日ぐらい) 7/8..9
		- これ、終わった。エンジン選択とエンジン設定を進める。


- エンジン設定の作業その3
	- EngineAutoSetting追加。
	- GlobalConfigの読み書きにDataContractSerializerを用いるように変更。
	- Model.Utility.Serializer追加。


- エンジン設定の作業その2
	- EngineDefine/Cpu.cs追加
	- 実行環境のCPUを判別して実行ファイル名を決定するところまで書けた。


■  2018/07/06


- エンジン設定の作業その1
	- 物理メモリ調べるの遅すぎない？処理時間計測する。
	- 200msほどしかかかってなかった。遅くはなかった。
- Shogi.EngineDefine.cs追加。ここに設定ファイルの生成器も入れる。
	- EngineDefine
		- 策定中
	- EngineDefine2018追加


- USI2.0.md更新


- 検討ウインドウでのMultiPVの処理その3
	- MultiPV向きの切り替えボタン用意するか？
	「R」ボタンを押すとR順に並ぶようにするか…。
	「着順」「R順」ボタン追加。
	「着順」-読み筋を到着時刻順に表示。
	「R順」-読み筋をR(Rankingの略。候補手の順位のこと)順に表示。
	- 検討モードの候補手の数、終了時に保存しておき、次回に復元するようにした。
	- MultiPVの処理、これで終わり。


- 検討ウインドウでのMultiPVの処理その2
	- 検討モードの時だけ「候補手」のComboBoxを出すようにした。
	- 検討モードの「候補手」の値でMultiPV出来るようになった。


■  2018/07/05


- 検討ウインドウに「候補手」のテキストボックス追加。
	- レイアウトを調整するコード追加。
- 検討モードには、MultiPVの処理が必要なのか…。大変だな、こりゃ。MultiPVの表示が必要だ。
	候補手１手
	候補手２手
	候補手３手
	候補手４手
	候補手５手
	候補手６手
	候補手７手
	候補手８手
	候補手９手
- MultiPVまわりも、きちんとイベント通知モデルで書いて行ったほうがいいのではないか…。
	- イベントモデルでリファクタリングする。
	- てか、delegate使ってあるところ、だいたいおかしいのでは…。
- UsiEngineThinkingState、StateというよりBridgeのような気が..renameしとく。


- 盤面編集で不正な局面を作って、検討モード、詰将棋モードに入ることが出来るのを修正。
- LocalGameServer、ソースコード少し整理した。
- 検討ウィンドウ、TopMost指定するのやめた。TopMostだと使いにくい気がした。


- 検討ウィンドウまわりの作業がひとまず終わったので、実装済みの機能.md更新。


- 検討ウィンドウのメインのウィンドウに対する相対距離、終了時に保存して、次回起動時に復元するようにした。
- 対局開始時に検討ウィンドウの内容を即座にクリアするようにした。
- 検討ウィンドウを非表示→再表示の時に前のPVが残っているの、削除するようにした。
- 検討ウィンドウがメインのウィンドウに重なって表示されていたの修正。
- 検討ウィンドウの評価値の表示で"++"と"--"の列追加。
- 検討ウィンドウにMultiPV用に"R"列追加。
- 検討ウィンドウを×ボタンで一時的に非表示に出来るように変更。
	- メニューに「ウィンドウ」追加。
- 棋譜ウィンドウで使用するフォントも、MS UI GothicからMSゴシックに変更。
	- 画面をリサイズした時に、ウインドウ範囲外に文字が出にくくなった。


- 現在の持ち時間をCPUのThink()に反映させる処理コード書いた。


- メインウィンドウのサイズ、シリアライズしたほうが良いのでは…。
	- GlobalConfigに保存するようにした。


- 検討機能の実装その14
	- 検討モードで前局面のPVが送られてくる件、修正。
		- UsiEngineThinkingStateにIsStopping追加。
	- 検討モードでユーザーの2点クリックが効かない件、修正。
	- 検討ウィンドウの探索node数など桁が増えてくるとずれるの修正。
		- MS UIゴシック、スペースが等幅ではないのでスペースによってpadding出来ない。MSゴシックに変更。


- 検討機能の実装その13
	- 検討中、急ボタンを無効化
	- 検討モードでは、Thinkコマンドでgo infiniteで回すように。
	- EngineThiningState追加。
		- すべてこのクラスを通じてbestMoveとponderMoveの処理を行うようにした。
	- PlayerクラスにSpecialMove用意する。BestMove,PonderMoveはgetterのみにする。
	- 検討モード以前に、CPUに持ち時間設定などを渡す必要があるのか…。
		- UsiThinkLimit.cs追加。
		- Player.Think(usiPosition,thinkLimit)
	- 検討モードのCPU側の思考時間、infiniteにした。
	- 検討モードで局面動かした時に前の局面の指し手(非合法手)ひとつ遅れてやってくる。
		- これ同期問題、結構やらしい。あとでよく考える。
	- 検討モードでpickがキャンセルされている原因あとで調べる。


■  2018/07/04


- 検討機能の実装その12
	- 検討モードでエンジンを初期化するコード書けた。
	- 検討モードでエンジンに局面を渡すコード書く。
	- 詰将棋エンジンはいつ起動するのか？
		- ああ、両立不可なのか。そうか。
	- 詰将棋ボタンを押すと詰将棋エンジンが起動するようにした。
		- 詰将棋エンジンのUSIコマンド、特殊なのか…。あとで考える。
		- メニューの対局のところに「詰検討」追加。
- LocalGameServerのEngineInitializingまわりのイベントモデル、おかしい気がする。コード、リファクタリングする。
	- LocalGameServer.UpdateInitializing()にまとめた。


- 検討機能の実装その11
	- 盤面反転しているなら、MiniBoardもそれを引き継ぐ必要があるのでは…。
		- 生成時の状態を引き継ぐようにした。
	- プロパティ名としてのVisiblity　→ Visibleにrename
	- 対局中は「検」ボタンを無効化するようにした。
		- 「解」「詰」ボタンも同様。


- 検討機能の実装その10
	- メニューに「ウィンドウ」追加。
		- よく考えたら、別ウィンドウになっているのだから、表示を見なければいいだけのような…。
		- 検討機能を実装してから考えなおす。
	- 「検」ボタンで検討モードに入れるように。
		- Config.InTheBoardEdit削除。これ、GameServerのGameModeがあるから不要か。
		- 依存プロパティ、依存している側はsetter不要なのか…。修正した。
		- gameServer.AddPropertyChangedHandler("GameServerStarted", UpdateMenuItems, Parent);
			- このプロパティ、削除。GameModeの初期値を別に用意して、LocalGameServer.Start()でその値を変更して、
				GameModeの変更イベントをハンドルすれば十分。
		- toolStripのほうの「検」ボタンのテキスト、検討中は「終」に変更する。
	- メニュー→対局のところに「検討モード」を追加。
	- メニューのファイルなどのところ、セパレーター記号、挿入。


- 実行時の例外を捕捉して例外内容とスタックトレースをダイアログに表示するようにした。
- 検討ウインドウのColumn生成前にリサイズイベントが起きた時に例外が出ていたの修正。
- Windows Server 2018 R2環境でRDPでつないで、やってみたら、検討ウィンドウの文字小さかった。なんぞこれ…。
	AutoScale大きすぎなのか…。これはまあいいのか…。


- USIの"info.."でparse出来ない文字列に遭遇したらエラーをログとして出力するように変更。
- MiniBaordのBoardReverseのsetterでもgameServer==nullの時に例外で落ちないように修正。


- 先手CPU、後手人間で対局開始時にBoardReverseにならないの修正。
- MiniBoardのBoardReverseのgetter、gameServer==nullの時に例外で落ちてたの修正。
- ⏪⏩ボタン、フォントがないそうで…。別の文字を使うようにする。


- EvalValueの定義変更による評価値グラフ表示エラーの修正。 #23(Mizarさんのプルリク)
	- Int.MaxValueが無効値扱いに変更されたため、float.NaNを用いて描画しようとしていた。


- 対局中のCPUの読み筋表示が終わったので、実装済みの機能.md更新


- メインウィンドウのリサイズで検討ウィンドウの位置、追随するように。
- 検討ダイアログ上の表示文字列、色々調整。


- CPU対局時の読み筋の表示の実装その7
	- LocalGameServerで、新しい局面に対してSetRootSfenイベントを投げるように。
		- 読み筋、なんとなく表示されるようになった。
	- ミニ盤面のボタン、いまひとつ反応が鈍い気がするのだが…。
	- 時刻表示、ミリ秒以下は0.1までの表示。
	- ミニ盤面、いつの間にか、反転ボタンが使えなくなっていたの修正。
		- メニューのupdateハンドラは呼び出されるが、メニューに属するLocalGameServerではないので更新イベントが発生しないのか。
		- UpdateMenuのハンドラで、メニュー更新していないときは、Dirtyフラグ立てるように修正。
	- ミニ盤面、いつの間にか、ユーザーが駒を動かせるようになっていたの修正。
		- これもとから動かせていたのに気づかなかっただけか…。
	- とりま、読み筋の表示はひとまず終わり。次は検討モード。
- UsiEngineの例外を捕捉して、Logに出力するようにした。


- EvalValue、符号を反転させた時に、先後逆から見た評価値になることを保証されるように修正。


■  2018/07/03


- CPU対局時の読み筋の表示の実装その6
	- USIプロトコルの"info .."のparser書き進める。
		- これ、PVはともかく、scoreはmateとかの表記もあるし、全部やろうとするとparse結構、大変なのでは..
		- scoreのところのparse、upperboundとかmateとかあって大変。これEvalValueに代入できなくて大変。
			EvalValueでupperbound表現できないの、設計のミスなのでは…。
			- ScoreBound追加。
		- とりま、読み筋の出力まわり、うまく動いた。
		- あとはSetRootSfen送るところとか書けば、読み筋の出力はひとまず完成か。
			- info...のparserちゃんと書くのとinfo stringなどの取扱いも考慮しないと。


- CPU対局時の読み筋の表示の実装その5
	- UsiEngine.HandleInfo()の実装
	- EngineConsiderationPvDataやめ。UsiThinkReportとrename。EngineConsiderationInfoDataと合体させる。
	- UsiThinkReport , UsiThinkReportMessageを用意。
- NotifyObject、BeginInvoke()でいいならLazyLock()する必要ないような？form以外を呼び出す時にdead lockになるのか…。


- CPU対局時の読み筋の表示の実装その4
	- 対局開始時にプレイヤーがCPUの場合、検討ウィンドウにそれを出力するように。
- NotifyObjectでInvoke()を使っていたのをBeginInvoke()に変更する。操作時のレスポンスなどが少し良くなった気がする。
- 対局盤面のネームプレートがいつの間にか、プレイヤー名が反映されなくなっている？
	- CPUだからか。CPUの時に名前を持ってくる処理、まだだった。あとで書く。


- CPU対局時の読み筋の表示の実装その3
	- メニューに「ウィンドウ」という項目追加。ウィンドウ設定はここに従う。
	- 検討ウィンドウを出した時にメインウィンドウの再描画のイベントが起きなくなってしまった…。原因調査する。
		- 検討ウィンドウを出したあと、Timerのtickイベント来てない。
		- ああ、MiniBoardの再描画イベントで無限に呼び出されていたのか…。修正した。
- Model.Common.Win32追加


- CPU対局時の読み筋の表示の実装その2
	- EngineInfo.cs追加。
	- private void engine_info_handler(EngineInfoKind kind,int n,object o)
		書いたが、これがUI Threadで実行されるためには…。NotifyObjectで表現する必要があるのか？少し考える。
		- そうみたい。LocalGameServerに仮想プロパティをもたせる方向で…。
	- GameScreenControlにEngineInfoChangedのプロパティ生やす。
	- MiniShogiBoardのForceRedraw削除。これ良くない設計だった。ちゃんとイベントとして処理するように変更。
	- EngineConsiderationInfoData、すべて文字列で保持するように変更。
- StringExtension絡み、渡された引数のnull check追加。


- EvalGraph: 評価値グラフの上下反転 (#22) Mizarさんのプルリク


- 検討機能の実装その9
	- EngineConsiderationControlの表示調整。
- CPU対局時の読み筋の表示の実装その1
	- handlerが複数になるのダサいな…。何かいい方法を考えなくては…。


■  2018/07/02


- 検討機能の実装その8
	- ミニ盤面の同期がなされないことがあったバグ修正。
- EngineConsiderationDataをEngineConsiderationPvDataにrename
- EngineConsiderationInfoData追加。
- EngineConsiderationControlに追加する。
	プレイヤー名
	予想手
	現在の探索手
	探索深さ
	探索局面数
	NPS
	ハッシュ使用率
	スレッド数
	- 一応、表示されるところまで書けた。あとで調整する。
- 別の棋譜を読み込んで同じ手数であった場合にその局面に移動できないバグ修正。
	

- 検討機能の実装その7
	- EngineConsiderationControlのクリックで読み筋を継ぎ盤で見せる機能
		- ミニ盤面、ちゃんと動くようになった。
	- GameScreenをGameScreenControlとしてコンポーネント化した現在、GameScreenControlViewModelは
		- 設計がおかしいので削除して、メンバをGameScreenControlに移動させる。
	- NoThreadモードの時にDirtyフラグが立ったら、即座に画面更新するようにした。
		- これ絡みでミニ盤面また更新されなくなった。あとで原因調査する。
	- MainGameDialogに初期局面に戻すボタンと末尾の局面に移動するボタン追加。
		- 実装した。
	

- 検討機能の実装その6
	- EngineConsiderationControlのクリックで読み筋を継ぎ盤で見せる機能
		- ハンドラ書いた
		- マウスクリックでミニ盤面に反映するようにはなった。マウスクリックというよりSelectedでミニ盤面に反映するように変更。
		- EngineConsiderationDialogの初期化まわりおかしい。盤面進められない。あとで調査する。
	- MiniShogiBoardDataからBoardReverse削除。ここに持たせるべきではなかった。


- 検討機能の実装その5
	- EngineConsiderationControlのクリックで読み筋を継ぎ盤で見せる機能
		- ハンドラまだ
	- EngineConsiderationControlのPVの読み筋の棋譜表示。(KIF2形式で)
- EvalValue、IsSpecialValue()追加。
	

- EvalValue、"score mate+" "score mate-"のこと忘れていたので追加。


- GameEvaluationDataに渡している評価値、List<EvalValue>に変更する。
	- これに伴う修正を、Mizarさんに依頼。


- 検討機能の実装その4
	- MiniShogiBoardのKifuListが同期していない件、調査
		- タイミングの問題だけのようだ。コード自体はうまく動いていた。
	- 検討機能より先にCPU対局時の情報表示をやらねば。検討はMultiPVなので、CPU対局時の情報表示の機能の上位のレイヤーである。
	- EngineConsiderationControlの表示列、追加。「読み筋」の幅自動調整のコード実装。
	- Model.Shogi.DataにEngineConsiderationData.cs追加。
	- EngineConsiderationControl.AddInfo()追加。
	- Shogi.CoreにEvalValue追加。


- 検討機能の実装その3
	- BoardReverseもGlobalConfigが持つと各GameScreenControlが個別に反転させられないので
		自前で持つべきなのか…。GlobalConfigからLocalGameServerに移動させる。
		- あ、そうなってた。
	- 検討機能より先にCPU対戦の時の読み筋の表示が先なのでは…。
	- MiniBoardに渡す構造体を設計するのが先か…。
		- この構造体、Model.Shogi.Dataに書くことに。
		- EvaluationGraphData.csもここに移動。
		- MiniShogiBoardData.cs追加。
	- EngineConsiderationDialogのMiniShogiBoardに盤面反転ボタン追加。
	- MiniShogiBoardのKifuListが同期していないようだ。なんで…。


■  2018/07/01


- 検討機能の実装その2
	- LocalGameServerにNoThread追加。スレッドなしで実行するモード。
	- MiniBoardのネームプレート、邪魔じゃね？
		- GameScreenControlにネームプレートなしで表示するオプション追加。
	- EngineConsiderationDialogのMiniBoardまわりに局面、進める/戻すのToolStripつけた。


- 評価値グラフ描画 (#21) Mizarさんからプルリク。
	* conv: message fix
	* SystemInfo: processorArchitecture を public に
	* KI2形式 + 駒打ちのみ"打"強制表示オプション(FromSqFormat.Drop)追加
	* 評価値グラフ描画


- 検討機能の実装その1
	- 読み筋の描画部分にListViewを使う。
	- ListView、ちらつく。DoubleBufferにしようにもそのフラグがprotectedだからListViewを派生させないと変更できない。なんぞこの作り…。
		- 将棋所はよく見るとちらついているように見える。ShogiGUIはちらついていない。
	- EngineConsiderationDialogに継ぎ盤つければいいのか？まあ、出来なくはなさそう。
	- 継ぎ盤用のコントロールさらに作るべきなのか。
		- MiniShogiBoard出来た。
		- LocalGameServer、停止を保証しないといけない。
			- あとで考える


■  2018/06/30


- メニューの更新の高速化
	- 対局中は呼び出されていないし、ToolStripも、CPU×CPUの対局中は更新は発生していないし、
	CPU×人間のときは多少遅くても誤差だし、まあいいか…。


- GameScreenのコンポーネント化その4
	- GameServerのイベント通知、もうちょっと整理。
	- TheAppでイベントのbindをするのをやめて、これらはGameScreenControlのほうでbind～unbindを行うように変更。
		gameServer.AddPropertyChangedHandler("InTheGame", mainDialog.UpdateMenuItems, mainDialog);
		gameServer.AddPropertyChangedHandler("BoardReverse", mainDialog.UpdateMenuItems, mainDialog);
		gameServer.AddPropertyChangedHandler("GameServerStarted", mainDialog.UpdateMenuItems, mainDialog);
		gameServer.AddPropertyChangedHandler("InTheBoardEdit", mainDialog.UpdateMenuItems, mainDialog);
	- これでGameScreenをコンポーネントとして再利用しやすくなった。


- GameScreenのコンポーネント化その3
	- MainDialogのRedrawの処理修正。
	- メニューの部分、ちらつくのでダブルバッファに戻す。
	- これ、貼り付けてるControlもダブルバッファにならないのか？
		- ならなさげなので良し。
	- よし、これでcommitしとく。大改造終わり…。


- GameScreenのコンポーネント化その2
	- GameScreenControlを追加して、そこに移動させていく。
	- MainDialogにGameScreenControl貼り付け
		- たまにコントロールの読み込みに失敗することがある。
		- x64絡みのコンポーネントをusingしてるとこうなる。
		cf. https://clown.hatenablog.jp/entry/20120725/vusual_studio_x64
		cf. https://social.msdn.microsoft.com/Forums/ja-JP/7760b7d4-f64a-4d89-a4fd-b581f1b8cd86/125031252112483124881250112457125401251212364x64123981239212365?forum=vbgeneralja
	- 大改造になった。GameScreenControlに変更。MainDialogViewModel削除。ViewModel実質なくなった。
	- Configにぶら下げているイベントハンドラ、まだ解消していないので画面反転など動かなくなった。修正中。


- GameScreenのコンポーネント化その1
	- 検討モードで盤面を描画するためには、盤面を描画する部分がきちんとコンポーネント化されて
	いなければならず、.NETの世界では、それは、Windows.Forms.Control派生クラスであることを意味している。
	- これ故に、Windows.Forms.Control派生クラスとしてGameScreenを設計しなかったのは、設計上の誤りである。
	また、ここがコンポーネント化されているということは、小さな駒台のGameScreenと普通の駒台のGameScreen
	の混在が許されるということで、そのへんをImageLoaderがglobalに持っているのも設計上の誤りである。
	- 仕方ないのでいまから大規模なリファクタリングを行う。
	- まず、BGとして
	        /// { 普通の駒台 , 小さな駒台 } × { 駒箱なし , 駒箱あり }の4通り生成して持っている。
		これを生成する。
		- →　実装完了
			- 起動が若干遅くなったか。(許容範囲？)
			- ウィンドウのリサイズに対してはもたりがなくなった。


- エンジンの読み筋とかを表示するControl用意
	- これを２つSplitContainerに配置したウィンドウを用意する。
	- EngineCosiderationDialogで表示するinstanceが1つの時と2つの時の切り替え実装。
- 読み筋ウィンドウがメインダイアログに追随するように。


- ゲームモードを持って状態を管理するように変更。
	- 対局中
	- 盤面編集中
	- 検討中(エンジンが動作している)
	- 閲覧中(対局はしていなくてエンジンは動作していない)
	これらは互いに排他されるべきなので..
	- 作業完了。イベントハンドラまわり、だいぶ改造になった。


- 形勢グラフの仕様追加。
	- 形勢グラフControlをMizarさんに依頼。
		仕様)
		検討モードの時など、現状の棋譜ウィンドウの下半分に表示するので、
		大きさはそれくらいでお願いします。将棋所、ShogiGUIなどを参考に。
		その他は、Model.Shogi.EvaluationGraph.csをご覧を。


- GameScreen、あちらこちらに貼り付けて使うならControlにしたほうが良いような気がしてきた。
	- リファクタリングするか…。大規模なリファクタリングになりそう。とりまあとまわし。


■  2018/06/29


- 2文字駒の後手の王、素材差し替え。「玉」に。


- readme.md更新。要望の受付リンク追加。
- 実装済みの機能.md更新
- 2文字駒の後手の王、「玉」にしておく。
	- ImageConveterで、先手玉のを上下反転させて生成しておく。
	- ああ、駒にパースがあるから、これうまくいかないのか。修正素材を依頼しておく。


- ToolStripボタンの文字フォントを13.7→12ptに変更
- ToolStripに◁ , ▷ , 本譜　ボタン追加。これで最低限、検討はできるかな…。
	- ToolStripのカスタマイズが出来るべきのような気はする。
- LocalGameServer.Considerationフラグ追加。


- 起動直後、現在の局面からスタートするとエンジンが不正な指し手を返す件、修正。
	- このときposition文字列きちんと構築されていなかった。
- 両方人間で開始した時に、最初の手番側が後手(盤面の上側)の場合、盤面反転をする処理追加。
- 駒箱の枚数の数字素材差し替え。
	- MizarさんがInkscapeで作成。


■  2018/06/28


- 棋譜の上書き保存
	- 実装完了
- メニューにファイル→終了を用意


- 局面の保存実装
	- KIF/PSN/SFENで書き出せていることは確認した
	- 盤面編集中のファイル書き出しはどうなんだろう…。まあ、出来てもいいか…。


- 対局中の盤面編集防ぐ。
	- また、GameServer側に盤面編集状態の変更コマンドを用意して、対局中は受理しないようにした。
	- UpdateMenuItems()、first tickで呼び出されることを保証するようにした。
- 駒箱の駒の枚数素材、新しいものに差し替え。
	- まだ少し見づらい気がするので修正依頼。


- コード少し整理


- 盤面編集の実装その12
	- 細長い駒箱の処理
	- 表示、詰め込んでなんとか出来たような…。
	- とりま、これで盤面編集の実装終わり。
- config.KomadaiImageVersion →　PieceTableImageVersionにrename
- 小さな駒の表示をするのに必要になったのでSpriteでratioを指定できるようにした。
	- SpriteEx.cs追加。


- 盤面編集の実装その11
	- 駒台で選択されている駒、マーカーつけた。
	- 駒台の駒を選んでいて、同じ駒台の別の駒をクリックした時に選び直しになるように。
	- 駒箱の駒を選んでいて、別の駒をクリックした時に選び直しになるように。


- 盤面編集の実装その10
	- 駒箱からの移動実装。
	- 駒箱から駒台、駒箱から盤面への移動実装。
	- 駒台から駒台の移動実装。
	- 駒箱の選択にマーカーつけるのあとでやる。
- RawPieceType()、|| にすべきところ && になってた。修正。


- 盤面編集の実装その9
	- 盤上の成り駒を手駒に移動させると落ちてたの修正。
- 成り、不成の選択ダイアログの反応が鈍くなっているの調査。
	- MouseMoveのイベント、捕捉の仕方、間違えてた。
- メニューの情報のところから「システム情報」のダイアログが出せるようにした。


- SystemInfo: output messagebox (#20) Mizarさん
- SystemInfo #19 Mizarさん
- 棋譜変換周りの仕様変更に追随など #18 Mizarさん


- 盤面編集の実装その8
	- 駒台全体を意味するSquareHandの領域を定義
	- 駒台のどの部分をクリックしても駒台に移動させられるようにした。
	- 細い駒台のときにも駒台→盤面、盤面→駒台、盤面→盤面の移動は出来ることを確認した。
- 成り、不成の選択ダイアログの反応が鈍くなっているの調査。
	- イベントハンドラの捕捉、間違えたのか？


- 実装済みの機能.md更新


- 盤面編集の実装その7
	- 盤面編集で駒台の駒を盤面に移動させる処理実装
- SquareHandの表現力が不足しているので、駒台の何もない領域と、駒箱の何もない領域を指せるように拡張する。
- SquareHand、ToHandPiece(),ToPieceBoxPiece()追加。


- 盤面編集の実装その6
	- 駒箱の駒の枚数を表示するための素材追加。
		- image/hand_box_number_v1_864_96.png
		- ImageManager、SpriteManagerに追加。
	- 編集時にはすべての駒が掴めるように。
	- 盤面編集で盤面の駒 移動、2駒交換が出来るようになった。
	- 盤面編集で盤面の駒を駒台に移動できるようになった。
		- が、駒台の判定がよろしくないので、このへんの処理、書き直すべき。
- 対局中に終了させた時に例外が出るパターンがあったの修正。
- CPU同士の対局の時に、エンジン初期化前にユーザーが盤面の駒を掴めるの修正。
- Position.CreateRawPosition()など追加。これで局面の生成が少し楽になる。
	- Position.RawBoard,RawHand削除。これよくない設計だった。


- 盤面編集の実装その5
	- 盤面編集の時に、二歩とか、先手玉が2枚とか、行き先の無い駒の配置とかを許容することに。(編集しにくくなるので)
		- ただし駒の枚数は管理しているので銀5枚のような局面は作れない。駒箱があるので銀3枚のような局面は作れる。
	- 逆に対局開始時に不正な局面かをチェックするようにした。
		- Position.IsValid()追加。
			- 二歩のチェック
			- 行き場のない駒
			- 非手番側への王手
			- 玉なし、片玉、玉2枚で同じ手番側、玉3枚以上のチェック
		- PositionにAssert()いくつか追加。
- 後手の玉の駒素材、いつの間にか「王」に…。うーん。まあいいか。
- Bitboardに対するforeach実装


■  2018/06/27


- 盤面編集の実装その4
	- 駒箱の素材、差し替え
	- 駒箱の数字、2枚以上のみ時のみ表示
	- 盤面編集時に駒の移動が指し手になるの修正。
	- 駒箱の駒の位置調整。
	- 駒箱の枚数の数字が見にくい件、素材発注。
	- 歩の素材が5ドット上にずれていたので加工しなおした。


- 盤面編集の実装その3
	- 盤面上で右クリックで先手→先手成駒→後手→後手成駒のように駒の変化するのを実装
	- Piece.RawPieceType()でKINGを渡したときに、NO_PIECEではなくKINGが返るように仕様変更。
		- CSAの読み込みルーチンなどに影響があるようだ。Mizarさんに修正依頼。
	- 成駒があるとsfenでの初期化で駒箱の駒を数える時にassertに引っかかっていたの修正。
	- KifuManager.FromString()で、エラーがないときはstring.Emptyではなくnullが返るように仕様変更。
		- これに伴う修正をMizarさんに依頼。
	- TheApp.MessageShow()でUIスレッド以外から呼び出すと例外が出ていたの修正。


- 盤面編集の実装その2
	- Positionクラス、使用していない駒を駒箱用にカウントする処理追加。
	- Hand型に玉も持たせたいが、入り切らないのか…。kingSquareでわかるからいいか…。
	- PositionクラスのSetSfen()でhandクリアしてなかったの修正。
	- 使用していない駒を駒箱に描画する処理追加。
	- 片玉のときに駒落ちだと判定されていたの修正。(詰将棋で「上手」「下手」とは言わないので…)
	- SquareHand、駒箱の位置を指し示せるように拡張
		- それに合わせて色々修正。
	- KomaBako → KomaBoxとrenameしておく。
	- Position.PieceBoxCount()追加
	- 駒落ちの初期配置に歩3枚追加。
	- 駒箱の駒の位置調整後回し。
	- メニューの盤面編集に手番変更追加。
	- Position.hand → handsにrename
	- 盤面編集中での対局開始で盤面編集が終わるように。
	- 駒箱で駒の枚数を表示した時に、数字素材の色が駒箱の色と混じって見にくい。
		- 考えとく。


- 盤面編集の実装その1
	- LocalGameServerに編集盤面の代入をsfenで行う機能追加。
	- BoardTypeにMATE_1 , MATE_2追加。
	- メニューから、平手、駒落ち、詰将棋、双玉詰将棋の初期配置に設定できるところまで実装。
		- 駒落ちの時に不要駒を駒箱に入れないといけないのか…。


- 実装済みの機能.md 更新
	- デバッグウィンドウのこと追記


- ログ関連でコメント追加。
- 指し手の詳細ログ、logに出力するように。
	- デバッグウィンドウでbestmoveでfilterすると表示出来るので要らないか…。
- NullLogクラス、使わないのでコメントアウト


- デバッグウィンドウ作成
	- メニューから生成できるように
	- デバッグウィンドウのコントロールの再配置のコード追加
	- LogのWriteにイベントハンドラを設定できるように。
- 対局中に終了させると例外が出ていたの修正。
- 駒がぶつかる時に駒音を変更するのだが、駒の手前の升が盤外の時に例外が出ていたの修正。
- デバッグウィンドウの実装完了。
	- これで思考ログ、まともに追いかけることが出来るようになった。


- callbackのハンドラ、UIで実行しないといけないと事前にわかっているのであれば、
	UIスレッドで実行されるようにObjectModelが必要なのでは…。
	- ObjectModel改造
	- "[UI thread] :"とメソッドの説明に書いてあるメソッドは、UI threadからの呼び出しが必要であることを意味するアノテーションとする。
		これらのメソッドはUI threadからしか呼び出されないので、このメソッド内からの呼び出しもUI threadで実行されることが保証される。
		- UI threadとついていないところからこのメソッドを呼び出してはならない。
		- もしくは、ObjectModelのUI callbackを利用する。
	- ソースコード、整理した。ObjectModel以外の明示的なInvoke()はすべて除去できた。


- 棋譜ウィンドウのvisibilityの変更を行うハンドラ用意した。
- 通常の駒箱、幅が少し広いように思うので素材の修正を依頼。


- 駒箱素材追加
	- koma_bako_v1_1920_1080.png
	- koma_bako_v2_1920_1080.png
	- 実行時にこれを畳、盤、駒台画像と合成してBGを作成する。
	- ImageManagerに追加。
- 一度メモリに読み込んだbitmap、残しておくのはメモリの無駄なんだろうか…。
	- 盤面編集に切り替えるごとにBGの再生成、無駄すぎない？
	- 同じファイルの読み込みだから、さほど時間かからないっぽいので(SSDなら)、まあいいか。
- メニューにとりあえず「盤面編集」追加。
	- とりあえず、メニュー項目だけ追加。
- アップデート情報のリンク、
	https://book.mynavi.jp/ec/products/detail/id=92007
	に変更。(予定地なのでまだ何も…)
- Sound.cs→SoundLoader.csにrename(ImageLoaderに合わせて)


■  2018/06/26


- kif: 変化手数の出力・入力書式修正 (#17) Mizarさんからのプルリク
	- KIF形式の分岐ファイルの読み込みに対応した。


- 情報のところに「アップデートの確認」追加。
- GlobalConfig.CommercialVersion、boolではなく0,1,2,…にする。
	- これに伴い、html/CommercialVersion.txtは、CommercialVersion2018.txtに変更。


- メニューの「その他」を「情報」に変更。ヘルプなどもここに入れる。
- メニューの「情報」配下に「ロギング開始」「ロギング終了」を追加。これを開始するとファイル上にログが残るようになる。
	- log201806261340.txt みたいな感じのファイル。
- メニューの「情報」配下に「デバッグ開始」「デバッグ終了」を追加。これを開始するとメモリ上にログが残り、
	デバッグウィンドウで見ることが出来る。
	- これらの状態を終了時に書き出すようにした。
- Logクラス、色々改造
- RemoteServiceにinstanceを区別するunique idを振るようにした。

- 盤面編集用の細い駒箱の素材発注

- 朱色の駒で、2文字駒と1文字駒が入れ替わるバグ修正。(素材加工時のミス)


- メニューでオフにしているにも関わらず「先手」「後手」と読み上げされていたのを修正。
	- SoundManager、読み上げはすべてReadOut()に変更


- 実装済みの機能.md更新


- コンピューター同士の対局で任意局面から開始すると棋譜の2手目が非合法手扱いされることがあるバグ調査。
	- GPS将棋が、sfenの局面からの"moves"に対応してないのでは。これはいいや。GPS将棋が対応していないということで…。
- 対局終了時に、分岐棋譜の操作ボタンが出た結果、棋譜ウインドウの最後の行が隠れてしまうのを修正。
	- ListBox.TopIndexを末尾にすることで実現できた。
- 対局終了後、「投」「待」ボタンがenableのままであったのを修正。
- 棋譜ウィンドウの文字フォントサイズ、ときどき設定に失敗しているのを修正。
	- Resizeイベントの処理タイミングがおかしいのか？
	- よくわからない。とりまOnResize()をUIスレッドで実行するように修正。
		- 修正されてない。
	- スクロールバーが出るからギリギリになるだけか…。
		- フォントサイズ、これ以上小さくすると細いフォントになってしまう…。
		- どうにもならない。これでいいや。


- 千日手判定おかしい。要調査 10.KIF
	- ああ、手番が違うから同一局面として扱われていないだけであった。
- 千日手成立の局面からの開始のテスト→うまく動いているようではある。
	- これ、COMでもうまく動くのか？
	- うまく動いているように見える。
- 升目の音声、短くして自然に聞こえるように。
	- メモリ上に配置するようにしたら少し切れ目が短くなった。
	- そこまで不自然でもないような気がする。
- 棋譜読み上げ、次の対局の時に、キャンセルして停止させるようにした。
	- SoundManager.Stop()追加。


- 時間切れのあと「成り」「不成」の選択が出来るの修正。
	 - あれ？出来なくなってる。時間切れのあとに操作してたのかな？
- 対局終了後、末尾の局面でUIから盤面を操作した時に、special moveを削除せずに局面を進めてしまう問題修正。
	- special moveを削除するのは良いが、千日手とか入玉局面とか特殊な局面に突入した場合、どうすんだ…。
- 棋譜の選択行、スクロールしなくなっていたの修正。
	- あれ？再現しない…。
- 棋譜読み込みでエラーになった時に出る警告ダイアログ、最前面に表示するように。
	- MessageBox.Show()をすべてTheApp.app.MessageShow()に置換。
- UIで操作して、千日手・王手千日手・宣言勝ちの局面に到達した時、それを棋譜ウィンドウに出力して、そこから動かせないように。
- UIで、千日手局面、宣言勝ちの局面からは駒が動かせないように。
- 起動時に棋譜ウィンドウを非UIスレッドから操作することがあったのを修正。
	- 再現しないので修正出来ているかよくわからないが…。


- 読み上げがメモリリークするの修正。
	- MediaPlayer.Stop()では開放されないのか…。
	- MediaPlayer.Close()を呼び出すようにする。
	- 修正されているかMizarさんに確認依頼。
		- なおっているらしい。
	- てか、音声素材20MBほどしかないのでメモリ丸読みでもいいはず。
		一度読み込んだ素材、開放しないでおこう。


- 「上手」「下手」の自動判別。
	- 読み上げ時に駒落ちなら「上手」「下手」と読み上げるように。
	- Position.Handicapped追加。
- 対局開始時に音声「よろしくお願いします」追加。
- 対局終了時に音声「ありがとうございました。またお願いします」追加。


- 初回だけ「先手」「後手」を読み上げるようにする。
	- メニューの音声のところに毎回読み上げるかどうかの設定項目追加。
	- デフォルトでは毎回読み上げるように変更。


- 王手の時と駒を取ったときは衝撃音に変更する
	- koma_c1.wav
	- オプションでオフにも出来るように。
	- あまりいい感じの音が作れなかったので、コードは書いたがコメントアウトしておく。


■  2018/06/25


- サウンドの同時再生のためにSystem.Media.SoundPlayerを使うのやめる。
	- DirectX.AudioVideoPlaybackを使って書き直す
		- MSサポート終了か…。
		- MediaPlayerを使うべきなのか。
			- 最新の記事がなかなか見つからない。
			- この記事新しい。
				- cf . https://www.ipentec.com/document/csharp-play-wave-file-use-media-player
				- System.Windows.Media.MediaPlayerを利用するためのアセンブリ"PresentationCore.dll"アセンブリを参照に追加します。
				- System.Windows.Freezableを利用するためのアセンブリ"WindowsBase.dll"アセンブリを参照に追加します。
				        var mediaPlayer = new System.Windows.Media.MediaPlayer();
						mediaPlayer.Open(new System.Uri(fullpath));
						mediaPlayer.Play();
				- こんな感じで使えるようだ。これに変更する。

	- MSのサポートが終了していないサウンドの同時再生が出来るAPIがなくて草。
		- cf. https://social.msdn.microsoft.com/Forums/vstudio/ja-JP/d5d5b7b1-2623-4aaa-b72e-53a065a14f69/win124501250312522123913889912434401801242512377123981239519968?forum=csharpgeneralja
		ループ	多重音声	終了イベント	非同期	その他
		SoundPlayer	○	×	×	○	wavのみ
		VisualBasic.Devices.Audio	○	×	×	○	wavのみ
		Win32 APIのPlaySound	○	×	？	○	wavのみ
		MCI	?	×	？	○	wav,mp3,midi
		waveOut	○	○	○	○	wavのみ
		Windows Media Player Control	△	○	？	○	wavのみ
		DirectX.AudioVideoPlayback	×	○	○	○	wav,mp3,midi等 MSサポート終了
		DirectSound	○	○	○	○	wavのみ MSサポート終了
		MediaPlayer クラス	×	○	○	○	wavのみ


- 音声再生をメニューからOn/Off出来るように。
	- 駒音と棋譜読み上げをメニューの「音声」に追加。
	- ConfigにKifuReadOut , PieceSoundInTheGame追加。
	- 駒音実装する。メニューからOn/Off出来るように。
	- System.Media.SoundPlayer、サウンドの同時再生が出来なくて、駒音が鳴らない時がある。んなアホな…。
		- あとでなんとかする…。


- 棋譜の読み上げ機能を追加。
	- あとでメニューでOn/Off出来るように。
	- 時間切れの局面のあとUIから駒を動かせるのあとで修正する。
- 読み上げ"agaru.wav"もらったのでsound/に追加。


- 棋譜読み上げSoundの読み込み準備。
	- Model.Resource.Sounds追加
	- 実行フォルダ配下、Sound/koma/追加
	- 実行フォルダ配下、Sound/takemata/追加
- Sound , SoundQueue , SoundManager など追加。
	- 一応、簡単な再生テストは合格。
	- "agaru.wav"が無い　→　担当者に連絡。
- Model.Resourceの画像関係は、Model.Resource.Imagesに移動


- 実装済みの機能.md更新


- 現局面から再開する時に、そこまでの変化手順を本譜の手順に変更するようにした。


- 分岐棋譜で棋譜ウィンドウで1番目(本譜)以外の分岐→1番目の分岐としたときにインデントが狂うのを修正。
	- 修正できた。
- PSN形式で分岐棋譜の書き出し～読み込みはうまく動いた。
- KIF形式での分岐棋譜の書き出しは、読み込みでエラーに。Mizarさんに修正を依頼。


- 対局後の盤面を動かす処理実装
	- 対局していない時にUI上から駒を操作できるようになった。
	- UI操作によって分岐棋譜が自動的に生成されるようになった。
- 起動時に棋譜ウィンドウに「開始盤面」と表示されていなかったの修正。


- 棋譜ウィンドウに色が使えないとしたら、棋譜の分岐を'+''*'で表して、本譜の手順'+'、本譜以外の分岐'*'とかにすべきか。
	本手順と異なる場合は、そこ以降、インデントする。'+'で、あとインデントで表現すれば良いのでは…。
- 棋譜ウィンドウにおる分岐棋譜に対するインデントの処理追加
- 次分岐ボタンの実装。
	- KifuControlにボタンのclick handler追加。
	- LocalGameServerに次分岐ボタンが押された時のhandler追加。
	- Tree.NextBranch()追加
	- 次分岐ボタン、実装出来た。
- 本譜ボタンの実装
	- Tree.MainBranch()追加
	- 本譜に戻るボタン実装できた。
- 消分岐ボタンの実装
	- Tree.EraseBranch()追加
	- 実装できた。


- 棋譜ウィンドウ、移動元を入れると文字が入り切らないので省略する。
- 分岐削除のボタンが必要。
	- 棋譜ウィンドウの下に「消分岐」ボタン追加
- 2つ目の棋譜読み込みのときに残り時間の表示が反映されていなかったの修正。


- 棋譜ウィンドウ、消費時間、00:00:00形式から、「1秒」のような文字形式に変更。
	- KifuTree.cs , RemoveKifu()にkifuWindowMovesの処理も突っ込む。
	- StringExtension.csにPadLeftUnicode(),PadRightUnicode(),PadMidUnicode()追加。


■  2018/06/24


- PR conv #16  Mizarさんのプルリク

	* コメントアウトしたコードの修正
	* 棋譜読み込みでファイルの種類を毎回選び直すのが面倒臭かった😥
	* 指し手に「左直右上寄引」が含まれるKIFファイルへ対応
	例: http://www.asahi.com/shougi/kifu25/open09.kif
	* 棋譜書式オプションコメント追記
	* 棋譜ウィンドウ向け表記変更テスト
	* FromSqFormat.Verbose では不要な「打」も出力
	* ((BoardType)bt).ToSfen() == null だった場合の処理
	* FromSqFormat.KIF,Verbose と SamePosFormat.KI2sp の組み合わせでの空白詰め条件の変更
	* KifuFileTypeの補完
	* dialog用htmlの修正 (bodyのpadding設定で":"が抜けていた）
	* remove whitespace before comma



■  2018/06/23


- KifManager: read time settings #15 (Mizarさんのプルリク)
	主に棋譜からの時間設定読み込み周りの修正です。
	FromSqFormat.Verbose でKIF/KI2形式の棋譜出力を行った場合のバグ修正
	ファイル読み込み時、先頭1024bytesからSJIS/UTF8エンコーディングの推定をするように


■　2018/06/21


- FileIO.ReadFile → ReadTextに変更。テキストのencoding自動判別するようにした。
	- BOM除去後のテキストを返すようにした。
	- 棋譜ファイル読み込み時に、棋譜ウィンドウとの同期が有効になっていなかったの修正。
	- EnableKifuListの構造、これで良いのか少し考えたほうが良さげ。


- 棋譜読み込み後、画面に反映しないことがあるのを修正。その1
	- Raise...で間違えてKifuListにPosition渡してた。修正。
	- SFEN読み込めない件、修正
	- BOM読み飛ばす処理が抜けているのか…。
		- 修正した。
		- Scannerがスペースとtabを読み飛ばす処理にバグがあったのでそれも併せて修正した。


- 任意局面から開始されているKIFファイルの読み込みでparseエラーになる件、Mizarさんに修正を依頼。


- 「本譜」と「次分岐」ボタンは、対局中には表示しないことにした。(紛らわしいため)


- 本譜の手順に戻るボタン、「次分岐」「前分岐」ボタン
	- 前分岐は要らないか…。
	- 「本譜」「次分岐」ボタン追加。


- 分岐棋譜を読み込んだ時に棋譜ウィンドウで分岐を選択できるようにする。
	- とりあえず、分岐のあるnodeの先頭に'+'が表示されるようにした。


- 棋譜読み込み後、本譜の手順の末尾に移動するように仕様変更。
	- KifuManager.FromString()


- 棋譜読み込み時の最終手がspecial moveの時に残り時間が画面に反映していなかったの修正。
	- よく考えるとそのnodeには到達していないから、currentNodeから取ることが出来ないんだよな…。
	- KifuManagerのDoMove()、special moveに対してDoMove()出来て、局面自体は進められないとまずいのか…。
	- KifuManager.Treeでspecial moveに対してDoMove(),UndoMove()出来るように変更。
	- ソースコード、すっきりした。
	- KifuNode、同じ指し手、許容しないように仕様変更。


- KifManager: kif/ki2書き出し (#14) , Mizarさんのプルリクをmerge


- PSN2形式の読み込みの時に、棋譜の持ち時間設定に従って残り時間を算出して読み込めるようにした。
	- 棋譜読み込み時の初期局面の残り時間が更新されていなかったの修正。
- 棋譜読み込み時に最終手の局面に移動していなかったの修正。


- PSN2形式では対局設定も書き出すように拡張。
	- psn2format.md更新
	- psn/psn2、tokenのところが大文字・小文字問わずparseできるように変更。
	- PSN2形式で対局設定の読み書きが出来るようになった。


- PSN,PSN2の棋譜読み込みの時のTimeSettingの反映について。
	- KifuTreeが時間設定を持っていないと残り時間の算出ができないような…。
	- 分岐棋譜に対して適切にそれを処理するの難しいんだよな…。
	- とりま、分岐は仕方ないとして、現在の対局設定をKifuTreeに持たせるようにして、
	棋譜読み込み時にそこを復元するようにする。
	- TimeSettingをKifuTimeSettingにrenameして、Shogi.Kifuに移動。
	- 棋譜読み込み時に、持ち時間設定をGameSetting.KifuTimeSettingに反映するようにした。
	- 対局開始時にGameSetting.KifuTimeSettingをKifuManager.Tree.KifuTimeSettingに反映するようにした。
	- Tree.GetKifuMoveTime → GetKifuMoveTimesにrename
- 対局者名、8文字を超えて表示されていたの修正。完全に左寄せに。


- PSNとPSN2、消費時間書き出してないの修正。
	- 消費時間、トータルの消費時間の読み込み対応
- TotalTimeに間違えて消費時間代入してたの修正。
- RealThinkingTime、ミリ秒に設定してないといけないのを秒のところに設定していたの修正。
- PSN,PSN2、消費時間の読み書き、うまく動くようになった。


- 棋譜書き込み後に棋譜ウィンドウで局面移動すると例外で落ちるの修正。
- 本譜の手順は、KifuNodeのmoves[0]に変更する。
	- KifuNodeからselectedKifuMoveIndex削除;
	- KifuNode.movesに指し手重複を許すように変更。


■　2018/06/19


- CSA形式の読み書きに対応。
	- 読み込み時のSpecialMove2回表示される。あとで修正する。
	- 書き出しでDoMove()忘れていたの修正。
	- 分岐棋譜には未対応。(あとでやる)
	- 持ち時間書き出し未対応。(あとでやる)
	- Mizarさんに依頼。


- 実装済みの機能.md、プロジェクトに追加。


- PSN2形式の読み書きに対応。
	- PSNとPSN2、消費時間書き出してないや。あとで修正する。


- 棋譜の読み込み、書き込み時に棋譜ウィンドウがちらつくの抑制する。
	- イベントをUpdateイベント1回で収まるようにする。
	- NotifyObjectでイベント抑制してもRaise..を直接呼び出した時のイベントが発生していたの修正。
	- 棋譜書き込み後に棋譜ウィンドウで局面移動すると例外で落ちるのはあとで修正する。
	

- PSNの書き出しに対応。
	- KifuFileTypeExtensions追加
	- PSNでの書き出し動作まで出来るようになった。


- PSNのファイルは読み込み出来るみたいなのでこのファイルで読み込みのテストする。
	- KifuTreeにkifuWindowMoves追加。
	- PSNファイルの読み込み～棋譜ウィンドウクリックでの局面の移動～現在の局面からの対局、うまく動いた。
	- 対局中はメニューのファイルを丸ごと無効に設定するようにした。


- 対局棋譜の読み書きその3
	- Kifファイルの読み込み、例外を投げないようにtry～catchで囲んで、エラー内容を必ずreturnするようにした。
	- KifuException.cs追加。
	- parseがエラーになる件は、Mizarさんに修正を依頼。


- Kif.cs BoardTypeでの初期化部分、リファクタリング。
- LocalGameServer/追加	LocalGameServerをpartialにして分離。
	- LocalGameServerCommands.cs追加
	- LocalGameServerProperties.cs追加
	- LocalGameServerWorker.cs追加


- Kifの読み込みルーチン、MizarさんのwipをMizarさんの許可の元、人力でマージ。
	- そこそこマージできたのでいったんpush


- LocalGameServerに"GameServerStarted"の仮想プロパティ追加。
	- これを用いてMenuのupdate handlerの初期化を行うように変更。


- TODO.mdをプロジェクトに追加。


- 対局棋譜の読み書きその2
	- 対局中はメニュー項目無効化。
	- Shogi.Kifu.KufuHeader追加。
	- Shogi.Kifu.KifuManager/追加。KifuManagerをpartial classにしてコードの整理。
		- Shogi.Kifu.KifuManager/sfen.cs追加。
		- Shogi.Kifu.KifuManager/psn.cs追加。
		- Shogi.Kifu.KifuManager/kif.cs追加。
		- Shogi.Kifu.KifuManager/json.cs追加。


- Model.Common.Utility.Encode.csのDetectEncoding、BOMついてる以外のencoding判定に対応をMizarさんに依頼。


- 対局棋譜の読み書きその1
	- メニューに、対局棋譜の読み込み、対局棋譜の書き出し追加。
	- Common.Utility.FileIO.cs追加。
	- Common.Utility.Encode.cs追加。
- aboutダイアログのDesigner.csも96dpiに変更しといた。


- 起動時に現在の局面から開始してしまうと棋譜ウィンドウに「開始局面」が表示されていない件の修正。
	- 表示されてた。LocalGameServerのコンストラクタで対局盤面を初期化設定するから、イベントハンドラが未設定で呼び出されていないだけだった。
	- まあいいや。
- 棋譜ウィンドウで局面を移動させて現在の局面から対局を再開させた時の処理追加
	- KifuTree.ply → gamePlyにrename
	- KifuTree.pliesFromRoot追加。
	- currentNode.selectedKifuMove追加。
	- 対局の再開時に棋譜が同期されるようになった。

	
- 局面戻した時に時間が反映しなくなっている。修正せねば。
	- ああ、終局後に戻す処理は未実装であった。
	- 反映するように修正した。
- TimeUpの時にIncTimeしていたの修正。(今度こそ！)
- IncTimeが有効でIncTime == 0の時に持ち時間設定のところに「切れ負け」と出力していなかったの修正。
	- TimeSetting.IsValid()追加。
- .NET Frameworkのターゲットバージョンを4.6.1に戻す。
	- いま、4.7.2関係ないみたいだし、4.7.2、WindowsUpdateでインストールされてないのが普通みたいだし。


■　2018/06/18


- TODO.md追加


- IncTimeの処理、指し手を指したときにTimeUpになっていなければ加算するように修正。


- とりま、対局ダイアログが環境によってうまく表示されなかったのはなおった。
	- Visual Studioのデザイナ、96dpiの状態で編集しなければならない。
		これは、.NET FrameworkのAutoScaleDimensionsの処理がバグっているためだと思う。
	- 自分の開発環境でデザイナからの再編集が出来なくなってしまった。困るなぁ…。
- RDPの低解像度環境(?)で、対局盤面が描画されない。
	- サーフェース作れてない可能性が…。
	- RDPのプロトコルバージョン、古いと駄目なんかもな…。
		- 原因またあとで調べる。
		- TODOにまわしておく。


- 対局設定ダイアログ、環境によって表示がズレるようだ。
	- 根が深そう。
	- cf. https://stackoverflow.com/questions/185804/how-to-control-the-font-dpi-in-net-winforms-app
	- cf. https://stackoverflow.com/questions/4075802/creating-a-dpi-aware-application
	- cf. http://8thway.blogspot.com/2013/09/winforms-per-monitor-dpi.html
	- cf. http://8thway.blogspot.com/2013/07/per-monitor-dpi.html
	- Visual Studioターゲットが.NET Framework 4.6になっている。これを4.7.2に変更するとどうか。
- ターゲットとする.NET Frameworkを4.7.2に変更した。
	- 4.7.0でWindows Formのhigh dpi対応に大きな修正が入ったようだ。 
	- これでもずれる…なんぞこれ。
	- high dpiでVSのデザイナで編集するのがいけないのかもな…。
	- 1574×979でダイアログ作っているのに、686×446で作られてしまっている。
		- 686×446の倍サイズが画面サイズ超えるからか。
		- high dpiでの編集、VSのほうにバグがあるんだな…。
            this.AutoScaleDimensions = new System.Drawing.SizeF(96F, 96F);
			// これを小さい値にして編集すべきなのか…。
- .NET Framework 4.7で入った修正
	- https://docs.microsoft.com/en-us/dotnet/framework/winforms/high-dpi-support-in-windows-forms
	- Windows 10のみか??
	- 以前の環境はhigh dpi対応しないほうが良さげ??


- 終局後の局面移動の処理追加
	- InTheGameでなければ自由に駒が動かせる(と使いやすいかも)
	- 分岐棋譜の機能が必要になる…のかも…。
- 局面は戻るようになったが、棋譜が消えてしまう問題が発生…。
	- これ、根が深い。あとでなおす。


- KifuTreeから
        public KifuLog rootKifuLog;
        public KifuMoveTimes rootKifuMoveTimes;
		を削除
	- 代わりにRootKifuLog , RootKifuMoveTimesというプロパティを追加。



■　2018/06/17


- 待ったをした時に時間を戻す処理その3
	- うまく戻るようになった。
- 残り時間の表示上、0秒で指しているように見えていたの修正。


- 待ったをした時に時間を戻す処理その2
	- 初期局面のKifuMoveTimesを配置する場所がないのでは…。
	- よく考える。


- 待ったをした時に時間を戻す処理
	- 1手ごとにKifuManagerに時間を保存しておく処理追加。
	- PlayerConsumptionTime　→　PlayTimerに変更。
	- PlayerTimersも用意。
	- TimeSettings.cs削除 TimeSetting.csに統合、TimeManagement/に移動
	- ConsumptionTime.cs追加。
	- TimeSettingにSwapPlayer()追加。
	- KifuMoveTime追加
	- KifuManager、だいぶ改造になった。あとでちゃんとなおす。


■　2018/06/16


- 持ち時間が減る時の画面描画、最小矩形にして高速化する
	- わからん。わりとまじめに実装しないといけないっぽい。
	- その矩形を逆affine変換してInvalidate()で渡してやる必要がありそう。
	- あとまわし。


- 中断処理、わりと面倒くさそうなので後回し…。

- 人間が後手、CPUが先手で対局を開始した時、自動で盤面反転するように。
	- 盤面反転状態から、人間が先手、CPUが後手の場合も同様。
	- 盤面反転、GlobalConfigが持つより、ViewModelが持つべきような気がする。
		GameServerのほうに移動させる。
	- うまく動いた。

//

- readme.mdの将来の予定、カテゴリーごとに分類


- 後手の駒の成り・不成のダイアログ、駒を180度回したほうが良いのでは。
	- ShogiGUIがそうなっているし、タブレット端末のようなものだとそうなっていて欲しい気がしたので
	- キャンセルの文字も180度回さないといけないので、今回は見送り。


- 対局設定に最大手数引き分けの設定を追加する
	- 追加した。設定が保存されるようにした。
	- 機能するようになった。
	- 「手数による引分」が長すぎて棋譜ウィンドウに収まっていない。
	「手数で引分」に変更する。
	- 棋譜ウィンドウの特殊な指し手の文字列は、6文字までに切り出して表示することに変更。(はみ出るため)


- 対局時間、無制限の設定が必要なのでは…。
	- 追加した。設定が保存されるようにした。
	- 表示の処理など、実装した。
	- 無制限にチェック入れたときにgroupbox丸ごとdisableになるようにした。


- 時間切れの時の消費秒が1秒多すぎる問題を修正する。
	- 計測秒を計算するところで間違えて繰り上げ秒を使っていた修正した。


- 後手の時間設定を個別にするにチェックした時に、先手側の"時間設定"が、"時間設定[先手/上手]"になるようにした。


- 消費秒が、繰り上げになっているが、これ、1秒以上は秒単位で繰り下げでは..
	- この処理を入れたが、秒読みがいまひとつ…。よく考える。


- 対局設定ダイアログのTabStopがおかしいの修正。
- 持ち時間設定表示に、秒読みの表示追加
- 残り時間、秒読みの表示処理
- IncTimeのテスト
	- GameStart直後に手番が来た時にIncTimeされるの修正。
- 対局設定ダイアログで、秒加算を選択した時は、秒読みのほうの設定のためのNumericUpDownを無効化するように。
- GameSettingDialogのdata-bindするところ、リファクタリング。


- 実装済みの機能.md、カテゴリーごとに整理


- 対局設定で持ち時間設定で秒まで設定できるようにした。(切れ負けなどのテストがやりにくいため)
- 対局開始時に非手番側の残り時間が表示されていなかったの修正。
- LocalGameServer.GameInit()→ GameStart()にrename


- 実装済みの機能.md、進捗更新。


- 持ち時間を減らして行く処理
- 対局時間設定に時間切れを負けにしないチェックボックス追加
	- この設定、終了時に保存されるようにした。
- 棋譜に指し手の消費時間が正しく記録されるようにした。
- 残り時間の表示が00:00:00より小さな値にならないようにした。
- 切れ負けの時は時間切れ負けが棋譜に記録され、対局が終了するようにした。
- IncTime(1手ごとの秒加算)の処理を入れた。
	- 秒読みの表示処理はまだ。


- 対局設定画面の先後入れ替えボタンの実装
- ControlBinderにUnbindAll()追加。
- Utility.Swap()追加
- 対局設定ダイアログの「先後入替」で持ち時間も入れ替わるように。
- TimeSettingsのWhiteSame→WhiteEnableに変更。


■　2018/06/15


- 対局設定、詳細設定画面追加
	- 「詳細設定」ボタンで幅広い対局設定画面に変化するように
	- 「詳細設定」に変更しているかどうかをGameSettingに記録。アプリ再起動した時にも状態を維持。
	- 後手を個別に設定するのチェックボックスも同様に保存。
	- 後手の対局時間設定も同様に保存。
- TimeSettingsクラス追加。先後両方の対局時間を管理する。
- MiscSettings.cs追加。
- ControlBinderにButtonのbind()など追加。


- TimeSetting、文字列化出来るようにする。
	- ToShortString()追加
	- 先後で持ち時間設定を変更したいのでは…。
- 対局時間設定、Byoyomi、IncTime対応
- 対局時間設定を先後で個別に設定できるように。
	- ちょっと考えないと…。


- GameSetting.Clone()追加。
	- PlayerSetting.Clone()追加
	- TimeSetting.Clone()追加。
	- BoardSetting.cs追加
- GameSettingDialogからGameStartを呼び出す時にGameSettingをClone()してから渡すように修正。
- LocalGameServerのほうでGameSettingを保持するようにした。
- Position.Clone()、修正。


- 時間管理
	- 対局設定の持ち時間のnumericUpDown、999999時間、59分、秒読み999999、一手加算999999秒まで設定できるように変更。
	- PlayerSetting , TimeSettingのファイル分離する。
	- 対局設定の時間のところをGameSettingに設定する。
	- 終了時に対局時間設定の項目が保存されるようになった。
- Utilフォルダ削除
- Model.Utility.ControlBinder.cs追加
	- これを使ってGameSettingDialogのコード書き直す。
	- 全部data-bindを使って書き直した。


■　2018/06/14


- 対局ダイアログの前回設定を、次回起動時に復元する処理
	- 対局者氏名
	- 対局者が人間か、コンピュータか
	- 開始局面、手合割
	について、復元するようにした。他の項目はまたのちほど…。
- GlobalConfigのデフォルト値、変更。


- 対局ダイアログの対局者氏名、人間のとき、それを盤面のネームプレートに反映させるようにした。
	- MainDialogViewModelから対局者氏名、削除。
- 細長い駒台の時の、先手の対局者氏名がきちんと右寄せになっていなかったのを修正。


- KI2形式出力での同～不成判定の修正
- KI2: 相対位置・動作表記時も同～の空白を詰める (#13) Mizarさん


- 対局開始のダイアログ、×ボタンで閉じて、再度開いたときにエラーで落ちるの修正。
- 対局開始のダイアログが最前面になかったの修正。
- aboutダイアログ、Show()で表示するように


- 先手反則/後手反則を反則負け/反則勝ちに変換 (#12) Mizarさん


- MoveのILLEGAL_ACTIONやめて、反則勝ちと反則負けを追加。
- メニューの「通常対局」のチェックがOnになるときがあったの修正。


- 駒落ちにした時に手番側から始まっていないの修正。
- BoardType.IsOkSfen()追加。
- 駒落ち対局が正常に行えるようになった。中断～再開や、途中からコンピューターに引き継いで指させるのも大丈夫っぽい。


- 対局開始時の手合割設定の反映
	- BoardType.ToSfen()追加。
	- Positionから駒落ちのsfen文字列削除。
- 手合割り、以下の14種類に変更。(WhaleWatcherがこうなっているため)
		平手
		香落ち
		右香落ち
		角落ち
		飛車落ち
		飛香落ち
		二枚落ち
		三枚落ち
		四枚落ち
		五枚落ち
		左五枚落ち
		六枚落ち
		八枚落ち
		十枚落ち


- 中断局面からの対局開始
	- KifuTree.RemoveKifu()で引数としてspecial moveであるかを取れるようにした。
	- バグ修正した。再開できるようになった。


- 中断局の再開機能
- KifuTree.csでJson棋譜のところの不明な指し手、埋めた。
- 投了したときに棋譜文字列が"null"になっていたの修正。
- 棋譜読み込みの時におかしくなるので、MoveにSpecialMoveToKifを追加して、特殊な指し手すべてを文字列化した。
	- 中断後、エンジンで思考継続するときに非合法手になってしまう。原因調査すべし。


- Shogi.CoreにAll.cs追加。All.Colors()とかAll.Square()とか書けて便利(な気がする)
	- これを使って少し書き直す。


- MoveGameResultにUNKNOWN追加。MoveにDRAWなど追加。
- これに付随してKifuManagerのCSAまわり少し修正。


- MoveにILLEGAL_ACTION追加。ILLEGALをILLEGAL_MOVEに変更。
- あるspecial moveが勝ちか負けか引き分けかを判定する、Move.GameResult()追加。


- 対局ダイアログの持ち時間設定をLocalGameServer.GameStartに渡せるようにする。
- GameSetting.cs追加


- KifuManagerでCsa表記の指し手、Moveに変換する部分、少し書き足した。


- NotifyObject、イベントの抑制ができるようにした。
- KifuTreeをNotifyObjectにして、LocalGameServerのコード、かなり整理した。


- NotifyObject、lock解除でイベントがまとめて発生する仕組みを実装した。


- readme.md、実装済みの機能をdocs/に移動


- KI2形式で同～不成の場合、空白を取り除く (#11) Mizarさん


- 成りしか出来ない駒に対して成り/不成のダイアログを出していたの修正。
- ILLEGAL_MOVEに対してゲームの終了をさせていなかったの修正。


- 中断の処理
	- 「中」ボタンの実装。対局の「中断」
	- 棋譜ウィンドウに「中断」と書き出されて、対局が中断されるところまで処理
- 起動時には「投」「待」「急」「中」の4つをdisable状態にする。
- LocalGameServer.inTheGameをInTheGameとrename。public propertyに変更。


- KifuManagerでspecial moveを置き換える。
	- KIF2形式、連続王手の千日手でも単に「千日手」と出力されるようなので、
		棋譜ウィンドウにKIF2の指し手文字列をそのまま表示するのには無理がある。
	- しかも、KIF形式のファイルでは、指し手として「千日手」が出力されるが、KIF2形式だとコメントとして「まで13手で千日手」のようになっているようだ。
	- 以下のように置き換えた。

                    case Move.NONE:            return "none"; // これは使わないはず
                    case Move.WIN:             return "入玉宣言勝ち";
                    case Move.REPETITION_DRAW: return "千日手引分";
                    case Move.REPETITION_LOSE: return "千日手反則負け";
                    case Move.REPETITION_WIN:  return "千日手反則勝ち";
                    case Move.MATED:           return "詰み";
                    case Move.MAX_MOVES_DRAW:  return "手数による引分";
                    case Move.INTERRUPT:       return "中断";
                    case Move.ILLEGAL:         return "非合法手反則負け";
                    case Move.TIME_UP:         return "時間切れ";
                    default:                   return "null"; // これも使わないはず..


- 対局開始のダイアログでの「対局開始」追加。
- メニューから「デモ用」の項目削除。
- 対局開始ダイアログで「人間」「コンピューター」を選択しての対局開始を実装。
	- 対局中断など実装まだ。


- Invoke()しているところ、すべてIsHandleCreatedで判定してからすることにする。
	- NotifyObjectだと通知が初期化タイミングで送られることがあるので、まだウィンドウハンドルが生成されておらず、
		BeginInvokeが不正になりかねない。


- LocalGameServerにUpdateKifuListOfTail()追加。
- 終局の「詰み」「千日手」「連続王手千日手反則勝ち」「勝ち宣言」が出力されるようになった。
- 棋譜ウィンドウの出力、「同　銀不成」となるのが不格好なのでMizarさんに修正を依頼。
- 「連続王手千日手反則勝ち」はKIF2として合法な文字列ではないと思うのでMizarさんに修正を依頼。
	- 棋譜ウィンドウへの出力文字列、KIF2の出力で不適切なものに関して、KifuManagerのほうで吸収することも
	考えられるが、なるべくならKIF2の表記に準拠しておきたいので、それはしないことにする。
	

- LocalGameServerの初期化抜けていたの修正。
- 参照のdelegateどう束縛されるのか、テスト


- 人間同士の対局においてエンジン初期化中のダイアログが一瞬出うるのを修正。
- LocalGameServerの通知モデルまわり、整理した。
- LocalGameServer、UI側から受け付けるmethodは、名前の末尾にCommandと追加。



■　2018/06/13


- Mizarさんの進捗分をマージ(#10)


- 「投」ボタン 投了の受理
- 人間プレイヤーの時だけ「投」を有効化
- Player.Dispose()追加
- UsiEngineの終了処理追加
- Player.IsInit　→　Initializingにrename
- ユーザーの投了はできるようになった。


- KifuManager.UsiPositionStringのほうにはUSIで規定されていない指し手を書き出さないように修正。
- KifuManager.Tree.AddNode(Move.RESIGN)が失敗するの修正。


- KifuManager.FromSfenString()でParseWordを呼び出していたの修正。
- Move.RESIGNをKifuManager.Tree.AddNode()に渡せるように修正。
- Move.IsOk()の定義変更。Move.NONEとSpecialMoveに対してfalseを返すようにする。
- Move.ILLEGALの綴り間違いの修正。


- Ki2の出力で、詰み、千日手などの出力処理が必要なのでkif.csに追加。
- 終局の処理
- Move.ILLEGAL追加。
- 千日手判定、入玉宣言の受理
- 両方がエンジンで対局したときにエンジン初期化中に対局がスタートするの修正。


- readme.md、実装済みの項目更新


- 待ったの処理
	- 「待」ボタン
- 自分の手番でしか効かないように
- 棋譜ウィンドウのdata bindの処理、おかしかったの修正。
- エンジン初期化中には待ったボタンを無効化する処理追加
- 待ったボタン実装完了


■　2018/06/12


- すぐ指すの実装。
	- 「急」ボタン
- コンピューターの思考中のみ「急」がenableになるように。
- エンジン初期化中は、ユーザーが駒を掴めないようにした。
- MainDialogButtonEnum追加。
- MainDialogのPaint用のハンドラで、メニュー領域に対する更新を区別していなかったのを修正。


- エンジン初期化中のダイアログ表示
- MainDialogViewModleからCanUserMoveなど少しメソッド減らす。


- MainDialogViewModel、リファクタリング。
- NotifyObjectのRaise..をpublicに変更。lockを忘れていたの修正。
- LocalGameServerで後手をGPS将棋にしてとりあえず対局できた。終局処理などはまだ。


- PlayerにCanMoveプロパティ追加。
- UI側から自分が動かせるかどうかの判定のために、このフラグを見に行くようにする。


- LocalGameServer、UsiEnginePlayer側の実装
- KifuMananager.Bind()削除
- Position.Clone()をMemberwiseClone()を用いて書き換え。
- NotifyObject、propertyの変更通知、lockが終わってから行うように修正。


- LocalGameServerのほうのKifuListから棋譜ウィンドウに反映するようにした
- LocalGameServerの処理、だいぶ実装した。


- KifuTreeの棋譜の更新部分、整理した。
- KifuTree.AddKifu()で棋譜ウィンドウにbindする形式で出力するように修正。


■　2018/06/11


- KifuManagerに棋譜ウィンドウに表示する用のKIF配列追加する。
	- List<string> KifuList
	- KifuTreeに持たせる
		- UsiのPosition文字列も必要
		- List<string> UsiList これをJoin(' ',UsiList)すればUSIプロトコルの"position"文字列ができそう。
		- UsiPositionString追加


- エンジン初期化時のダイアログ素材追加
	- "engine_init.png"


- Controller/ 削除 。Shogi.LocalServer追加。
	- LocalGameServer.cs、後者に移動。


■　2018/06/10


- CsaConnectDataをNetwork　→ Network.Csaに移動
- GameController →　Controller.LocalGameServerに移動
- Listが変更になったときにNotifyObjectで通知するの、もう少し方法を考えたほうがよさげ。
	- NotifyObjectにListの部分通知のメソッドを用意した。
	- その他、新しいNotifyObjectに準じてソースコードを修正。
- 棋譜、ウィンドウに新しいNotifyObjectのListの部分更新の仕組みで更新されるようにした。


- readme.mdにレーティング計測の協力をしていただいたuuunuuunさんのこと追記。


- UsiEngine.HandleBestMove()少し書いた
	- 続きは、GameServerみたいなクラス書いてから。


- ProcessNegotiatorDataにIsLowPriority追加
- UsiEngineのusinewgameのときにプロセス優先度を下げる処理追加
- USIコマンドのusiok,readyok,idのハンドラ書いた。
- ProcessNegotiatorDataでworking_dirが省略されたときに実行ファイルと同じフォルダをworking directoryとするようにした。



■　2018/06/09


- いますぐ指す　の tooltipが いまずく指す　になっていたの修正(whitebellさん)


- LogInfoTypeにUsiServer追加。
- UsiEngine.ChangeState()追加
- UsiEngineState.ToString()追加。
- エンジンが見つからない時の例外を処理するようにした。


- ScannerException.cs削除
- Model.Utility.Log追加
	- Log.cs追加。
- UsiEngineの初期化まわり修正。


- Scannerの仕様変更に伴い、setoptionのparser修正。


- Scanner、正規表現を使うの生成が重いような気がするので、全面的に書き直す。
- sfenの読み込み部も、これを使って書き直す。
	- KifuManager.FromSfenString()を書き直した。少し読みやすくなった。
		- 動作は未確認。まあ、あとでええやろ。


- UsiEngineNegotiatorをProcessNegotiatorリネームしてCommon.Networkに移動
	- Common.Processにしとこう。


- RemoteSerivceのWrite書く。
	- 書けた。エンジンに対してうまく送信できた。


- RemoteServiceのReadなんとなく書けた。子プロセスからRead()できるようになった。



■　2018/06/08


- Model.Common.Network/RemoteService.cs追加


- UsiConnectionData.cs →リネーム UsiEngineData.cs
- UsiEngineNegotiator、少し書いた
	- いまひとつ..


- 駒の移動元、移動先のシャドウ追加
	- piece_shadow_v1.png
	- あまり思っている感じではなかったのでコードを無効にする。


- 細長い駒台用のネームプレートと手番素材追加
	- turn_v1_1057_157.png
	- DrawStringに右寄せ描画追加
	- DrawStringで文字色の指定ができるようにした


- 手番素材修正
	- turn_v1_106_43.png
	- メニューで表示のオン/オフ追加


■　2018/06/07


- 手番素材追加。
	- image/turn_v1_158_54.png
	- ImageManagerなどこの素材の読み込みに対応。


- 「マイナビ」という表記を「マイナビ出版」に変更。


- オープンソース版のaboutダイアログにMyShogiのロゴ画像追加。
	- html修正。



■　2018/06/06


- UsiOptionMin.cs追加
- UsiTimeData.cs追加
- Position.clone()をClone()にリネーム


- UsiOption.Parse()など実装
- Shogi.TimeMan.cs移動。Shogi.Playerへ移動
- Shogi.Model.MathとShogi.Model.ObjectModelをShogi.Model.Commonに移動。
- Shogi.Model.Common.Utility追加。
	- Scanner.cs追加
	- ScannerException.cs追加
	- Scannerを用いてKifuManagerのsfen解析部を少し書いてみるか？
	- Scannerを使うほどでなさそう。とりまUSIのoption解析に使おう。
- UsiOption.Parse()書けた。
	※　WhaleWatcherライブラリを参考にさせてもらいました。


- 名前空間変更。USIエンジンとPlayerを抽象化したものは、以下のnamespaceに移動。
	- Model.Shogi.Player
	- Model.Shogi.Usi
		- UsiException.cs追加
		- UsiOption.cs追加
			- 書きかけ。よく考える。
		- UsiOptionType.cs追加
		- UsiEngineException.cs追加


■　2018/06/05


- 対局コントローラーみたいなのが必要。
- 先にエンジンとのやりとりをする部分を作る。
	- Model.Shogi.Engine
		- EngineNegotiator.cs追加
		- PlayerType.cs追加
		- Player.cs追加
		- HumanPlayer.cs追加
		- UsiEnginePlayer.cs追加
		- UsiConnectionData.cs追加
		- UsiState.cs追加
	- engine、やりとりまわりだけであと1万行ぐらい書かないといけない模様。吐きそう。


- 連続王手の千日手を回避していないダイアログ
	- ダイアログやめて、即座に負け扱いで終局したほうがいいのでは…。
	- なら、これはこれでいいや。指し手の処理まわりを実装すれば自然に解決するだろう。

- Object間の更新通知の仕組み作る
- ちゃんとDataBindの仕組みを使って書かないと変なバグ産みそう..
	仕方ないのでちゃんとやるか…。
                // ここをUIスレッド以外で行うためにViewに対して
                // Invalidate()する必要がある。
                // あとで考える
                // TODO : これあとでちゃんとメッセージングを使って書き直す
- NotifyObjectでのイベントハンドラ、変更されたobjectを受け取れるようにしよう..
	- 修正した。少し使いやすくなった。
- Positionのclone()実装する。
- GameControllerのコード、これいまやっていると時間もったいないので、マルチスクリーンまわりの作業はいったん保留。削除。


- Fontのサイズをfloatで指定するように変更。
- 棋譜ウィンドウのScrollbarの計算、修正。
- 駒を掴んだときにマウスカーソルにへばりつくモード
	- これやめとこう。



■　2018/06/04


- MainDialog、GameSettingDialogのAutoScaleModeをdpiに変更。
- 成り・不成のダイアログ、一段目付近の場合、画面外に出ていたの修正。
	- 棋譜ウィンドウに重なるように出ていたのも修正。


- readme.mdの作業状況、更新

- エンジンダイアログの作業開始
	- パッケージ用の画面写真のためにとりま、何か作らねばならない。
		// 段位選択
		将棋神
		九段
		八段
		七段
		六段
		五段
		四段
		三段
		二段
		初段
	- ImageLoader.CreateAndCopy()追加。
	- GameSettingDialog追加。
	- とりま、なんか出来た。

- 棋譜ウィンドウ、最小化しているときにフォントサイズがマイナスになって落ちるの修正。


- 移動できない升を示すエフェクト、重すぎ。
	- 移動できる升のみ光らせるぐらいのほうが良いのでは…。
	- 光らせる設定もメニューに追加した。
	- 升の塗りつぶしエフェクト、ダサすぎなのでデザインお願いしたほうが良いのでは…。
	

- 成り・不成のダイアログに描画されている駒のセンタリング
	- SpriteManagerのほう修正した。
- 棋譜ウィンドウの表示、消費時刻のインデント狂っていたの修正。
	- BorderStyleがFixed3Dになっていたの修正。
	- 棋譜ウィンドウの先頭に開始局面と入れた。
	- 棋譜ウィンドウのpadding修正。
	- 棋譜ウインドウ、スクロールバーを出したときにそれを計算に入れて文字を縮小する。


- 棋譜ウィンドウをListBoxに変更。
- 棋譜ウインドウの文字描画、WebBrowserを用いると環境ごとの差異をゼロに出来ない。
	また思っているフォントサイズにならない。ブラウザの文字のレンダリング、いい加減すぎ。
	これはもっとノウハウがないと無理ぽ。
	- とても残念だが、仕方ないので、棋譜ウインドウを.NET FrameworkのListBoxに変更する。


- Mizarさんの作業分をマージ(#7 , #8)


- KifuManager
	- KifuManagerのCSA形式の読み込みのサポート
	- KifuManagerのKIF形式のサポート
	- KifuManagerのKI2形式のサポート
		- Mizarさんに依頼中


- Kif.csのKIFがsingletonになっていなかったの修正。
- CSA.csのコメントがkifになっていたの修正。


- 棋譜ウインドウへの出力
	- とりま棋譜が表示されるようになった。
	- 文字サイズが環境によって異なる＆リサイズがうまく出来てない。


- Mizarさんの作業分をマージ(#6)


- 先手の成り駒の位置、微調整。
	- ImageConverter修正。


- 成り・不成のダイアログのhoverの処理追加
	- SpriteManager.PromoteDialog、定数を外に出した。
	- SpriteManager.IsHoverPromoteDialog()追加した。
	- 成り・不成のダイアログの選択ハンドラを書いた。
		- 駒が動かせるようになった。
	- 成り・不成の行き先の升、最終手の升のエフェクトが優先されているの修正。
	- Position.IsLegal()で打ちと成りの共存する指し手がlegalに判定されていたの修正。
	(普通、指し手生成ではこの指し手を生成しないので関係ないが、成り・不成のダイアログの処理で困る)


- 成り・不成のダイアログ追加。
	- "promote_dialog.png"
		- width = (103+102)*2 = 410 , height = 124+39 = 163
	- ImageManagerにPromoteDialogImage追加。
	- SpriteManagerにPromoteDialog()追加。
	- SpriteにdstOffset追加
	- GameScreenDrawのほうのDrawSpriteにdstOffsetの計算追加
	- とりま、ダイアログ自体は描画されるようになった。
	- どれがクリックされたのか判定難しい。
		- ダイアログをSpriteで描画しているので転送元スプライトを求めるためにはマウス座標から逆変換がまた必要になって…。


■　2018/06/03


- 駒をデバッグ用に実際に移動させる処理を書く
	- Util.MakeMove(SquareHand,SquareHand , bool promote)追加
	- とりま、駒がユーザー操作で移動できるようになった。


- ドラッグによる駒の移動実装


- Position.PieceOn(SquareHand)追加。
	- これがないと駒打ちと駒移動を同一の枠組みで処理できない。
- SquareHand.IsDrop()追加
- 掴んでいる自駒を再度クリックしたとき、掴んでいたのをキャンセルする動作にする。
- GameScreen.move_piece()用意。ユーザーが駒の移動を示したときにうまくこのハンドラが呼び出されるところまで確認。


- MainDialog.ScreenRedraw()でnull判定追加。
	- MainDialogのコンストラクタのInitializeComponent()の最中にresizeイベントが
		発生しうることをうっかりしていた。


- Position: 10枚以上の持駒を受け入れる (#5 Mizarさんより)


- 手駒を打つときの重ね合わせ表示がおかしかったの修正。
	- picked_up_spriteの処理、統合。
	- 駒台の手駒を掴んだ時に掴んだ升のエフェクト処理を追加。

- 王手を回避していない警告ダイアログ
	- これ、使うのやめる。自殺手とダイアログを分けるの結構難しい気がする。
		すでに合法手のみになっているので、余計なことしないでおこう…。


- 駒台の駒を打つ為に掴む処理
	- 駒台の駒をつかめるようになった。
	- 手番側の駒しかつかめないようにした。


- 升のエフェクトのenumを用意
- GlobalConfig.PickedMoveToColorType追加
- MainDialogのメニューに駒を掴んだときの移動先の升のエフェクトを変更できるようにした。
	- 移動できない升を暗くする
	- 盤上の駒を掴むところまで出来た。


- マウスクリックに対して駒を持ち上げている感じになった。


- MainDialogからGameScreen分離
	- だいぶ綺麗に分離した。(分離できた)


- MainDialogViewState.cs追加。
	- ユーザーの操作に対して状態管理を行う必要があるので。
	- MainDialog.csもWin2D/MainDialog配下に移動
	- MainDialogViewState.cs追加
	- MainDialogViewInstanceにMainDialogViewState追加。


- MainDialogで複数対局画面を描画するときに必要なものを分離
- ObjectModel/Util.cs削除
- Model/Math作成。
	- AffineMatrix.cs追加。
	- Vector2D.cs追加
- System.Mathを参照していたところ修正。
- MainDialog.KifuControlをMainDialogのViewInstanceに移動。


■　2018/06/02


- MainDialogのコード整理
	- width,heightはSizeを使って書き換える。
	- Piece.Inverse()追加
- BoardReverse、やはりGlobalConfigにも用意する。Viewの個別設定は別途必要。
- SquareHandにToSquareHand()追加。


- 指し手の選択機能をMainDialogに追加する作業開始
	- MainDialogViewModelにCanMoveなど追加。
		- MainDialogのClickハンドラでこのpropertyを見に行くように
	- MainDialogにAffine()の逆変換であるInverseAffine()追加
	- MainDialogにマウスハンドラ追加
		- ドラッグ、クリックを自前で判定
	- Model.Shogi.CoreにSquareHand追加。
	- BoardReverseをMainDialogViewModelに移動


- aboutダイアログのhtmlで文字フォントを指定した。
	- これで、複数の環境でうまく表示できることを確認。
	

■　2018/06/01


- aboutダイアログのhtml、centeringなど。
	- もう少し調整が必要な模様…。


- readme.mdに最新の作業状況などを反映。


- aboutダイアログのhtml修正。
	- WebBrowserの問題、pxで指定していたのがいけなかったのか。(Mizarさん、サンクス)


- マーカー用に黒の成り駒を用意する。
	- ImageConverter修正。
	- 駒画像、heightを424から636に変更。
	- ImageManager修正。
	- SpriteManager修正。
	- GlobalConfigにPromotePieceColorType追加


- 縦長の駒台画像差し替え。
	- それに伴う手駒の描画座標修正


- 駒の移動方向が図示してある画像の処理
	- 連結スプライト用意するか…。
		- した。
	- "piece_atk_v1_776_424.png"
	- 成り駒とマーカーが混じると見にくい…対策考え中。


- 棋譜ウインドウのリサイズハンドラ追加
- MainDialogにaffine(Size)追加。


- 棋譜ウィンドウ、MainDialogに埋め込んだほうがいいかもな。よく考える。
	- 棋譜ウィンドウ、WindForm.Controlに変更
	- Control.DesignModeがうまく取れない。吐きそう…。
	- 解決した : https://stackoverflow.com/questions/4498478/designmode-in-subcontrols-is-not-set-correctly
	- とりま、棋譜ウィンドウをMainDialogに埋め込んでおいた。あとでもうちょっとなんとかする。
- MainDialogからaffine変換する部分をMainDialogDraw.csに移動
- MainDialogにaffine(Point)追加。


- html/をgitの管理下に移動。


- 棋譜ウィンドウの実装開始
	- WebBrowserを抽象化したクラスを用意するか？
	- navigateとInvokeしかないからしなくてもいいかな…。
	- とりあえずKifuDialog途中まで書けた。
	- このデザインよく考えたほうが良さそう。
- MainDialogのDrawString、dpiに非依存に変更する。
- htmlの配置場所、text/やめて、html/に変更する。


- dpi awareに変更する
	- cf . Windows Formsアプリケーションの高DPI対応  https://qiita.com/felis_silv/items/efee4b1a397b0b95100a
	- AboutDialogも修正。うまく動いたのでこれで良し。
- 良く考えた末に、Window.Controlのなかで使うWebBrowser、dpi awareになられると困るという結論になった。
		- 外側のControlがdpi awareで、自動的に拡大されてて、それに応じた座標系を使って、窓を作ってそこに
		WebBrowserを配置しているのに、そのなかが勝手に違う座標系で描画されるのがおかしくなる原因。
		- WebBrowserのhigh dpi対応
			- https://social.msdn.microsoft.com/Forums/vstudio/en-US/cea332e5-071d-4db5-bee5-1c3342644e70/webbrowser-control-high-dpi-support?forum=winforms

- 縦長の駒台、もうちょっと上まで素材が必要。修正依頼。
- NotifyObject、値型の比較するところ、間違っていたの修正。
	- NotifyObject.Util.GenericEquals()追加。
- 駒台とネームプレートの素材を分離
	- ImageManager修正。
	- GlobalConfig.KomadaiImageVersion追加
- 駒の移動方向の素材発注
- WebBrowser、high dpi対応、ムズすぎワロタ


■　2018/05/31


- MainDialogで描画している画像、すべてSprite化する。
- ImageLoaderにSetNullBitmap()追加。
- MainDialogのDrawImage()廃止。描画手段はDrawSprite()とDrawString()だけに限定した。


- Spriteクラス追加。
- SpriteManager追加
- MainDialogをSpriteを用いて描画を抽象化
- ImageManagerのプロパティ名の～Img、ここだけ省略形なの気持ちわるいので～Imageに変更。


- MainDialogのコード、機能別にファイルを分離
	- View/Win2D/MainDialog/ 追加
		- MainDialogEventHandler.cs追加
		- MainDialogFitToScreen.cs追加
		- MainDialogMenu,cs追加


- readme.mdに特徴など追加


- 着手後の移動元の升のエフェクトを追加。(デフォルトでは、なし)
	- メニューで選択できるようにした。
	- GlobalConfigにLastMoveFromColorType追加。


- 升のエフェクト、駒の画像と分離する。
	- ImageLoaderにSetBitmap()追加
	- ImageManager内で生成するコード追加。
	- Graphics.DrawImage()で生成していたの間違いなのでSetPixel()使うように修正。
- 移動先の升のエフェクト、なしを選択できるようにする。


- "setting.xml"名前かぶりかねないので"MyShogi.setting.xml"に変更する


- 小さすぎるフォントの文字を描画しないように。
- MainDialogの横幅、一定以上に縮められないようにするコード追加。
	- 一定以上にも広げられないコード追加
	- →　あかん、これハングする。.NET FrameworkのClientSize、setterの処理おかしい気がする。


- MainDialogにToolStrip追加する。
	- とりあえず「転」ボタンだけハンドラ用意した。
- メニューに「対局」を追加する
	- 中身はまだ何も。
- 商用版、GlobalConfigにCommercialVersionのプロパティを用意することに変更。
	- 商用版の判定、間違っていたの修正。


■　2018/05/30


- メニューに「その他」を追加
	- aboutダイアログ追加
	- "YaneuraOuGUI2018.txt"の置き場をtext/に変更
	- "global_config.xml"のファイル名を"settings.xml"に変更


- ImageConverterの元画像のフォルダ変更する。


- 最終手の表示、色が変更できると良いのか…。
	- 誰得なんだ、この機能。
	- GlobalConfig.LastMoveColorType追加
	- これに伴いImageManager修正


- progress.md削除
	こんなん要らんやろ…。

	# 作業状況

	## Model/Shogi/Core

	- Bitboardをやねうら王から移植 →　完了
	- Bitboardで利きの実装　→　完了
	- GenMoveで全合法手の生成　→　完了
	- Positionクラスの実装、DoMove(),UndoMove() →　完了

	## Model/Shogi/Kifu

	- 棋譜の読み書き PSN,PSN2形式完了
		- CSA,KIF,KI2形式まだ
	- KifuManager、おおよそ完成

	## View

	- MainDialog →　対局盤面表示できるようになった(段・筋の数字と手駒はまだ)
		- メニュー色々、追加中。
		- 盤面反転　→　完了
		- 駒の画像選択　→　完了
		- 盤の画像選択　→　完了
		- 畳の画像選択　→　完了

	## App

	- GlobalConfig →　全体設定の読み込み、自動保存のコード書けた。


- readme.md、予定のところに局面の画像出力機能など追記。


- 最終手の移動先の升を朱色にする
	- ImageConverter修正。
	- Piece.WHITEのところの画像にその朱色のイメージを入れる
	- MainDialog、修正。


- 畳と盤面画像を分離する
	- ImageLoaderでRGBに読み込む機能不要なのでは…。削除する。
	- 代わりに、imageを合成する機能を用意する。
- ImageManager、Load修正。
	- エラー処理、削除。(ファイルが存在しないときは赤い「×」が設定されるので)
- GlobalConfigからScreenRatio削除
- GlobalConfigにTatamiImageVersion追加
- MainDialogのメニューに畳の選択追加など


- 成り駒は赤い駒に変更する
	- ImageConverter修正。


- 対局盤面、対局者氏名が描画されるように。
- 手駒の枚数画像、わかりにくかったので差し替え。
	- いい感じになった。
- board画像、対局者氏名のところ窓枠修正。
- MainDialogの定数をMainDialogConst.csに分離


- 画像の読み込みに失敗したときに、赤で「×」の画像を生成して、それを表示することにする。


- 盤面の描画位置、メニュー高さ分だけずれていたの修正。


- フルスクリーン時の処理、専用で何か追加したほうが良いのでは…。
	- フルスクリーン時にwindow captionを消す処理を追加
	- 簡単ではなさげなのでやめる。
- 駒の枚数の数字、縮小されたときに見にくいので修正依頼。


- ウィンドウのリサイズが出来るように変更する。
	- affine変換の係数おかしかったので修正した。


■　2018/05/29


- 背景、alpha channelありのbitmapに読み込むの無駄なのでalphaなしのBitmapにcloneするようにした。


- Mizarさんのプルリクをmerge (#4)
	* KI2: 盤上で着手可能な駒が無ければ駒打ちと解釈する
	* CSA: "P+00AL", "P-00AL" の実装
	* KifuManager: wip
	* EastAsianWidth


- ImageConverter、成り駒の位置調整、忘れていたの修正。


- 手駒の右肩に表示する駒の枚数を示す数字画像追加
	- 読み込みに対応
- MainDialogの駒台の駒の描画
	- 反転表示に対応
	- 駒が2枚以上のときは右肩に数字表示をするように
- MainDialogの駒台の画像を大きめに変更


- Menuに盤の数字を描画する/しないを追加した。
- ImageConverterにConvertBoardNumberImage()追加。
- GlobalConfigにBoardNumberImageVersion追加。
- GlobalConfigにBoardReverse追加。
	- 関連するハンドラ追加
	- MainDialogに反映するように。
- メニューの表示のところに「盤面反転」追加。
- MainDialogの盤上の駒に盤面反転が反映するようにした。


■  2018/05/28


- MainDialogの描画のところ、抽象化した。


- 駒素材、ずれ修正。
	- ImageConverter、すべての駒素材を一括変換するように修正。
	- 駒素材のNO_PIECEのところにα30%の黒入れる。(明度を落とすのに使えるかも。あるいは位置の確認に使えるかも)
	- 読み込む駒画像の横幅776pxに変更


- Menuにデバッグ用の項目追加。
	- リリースのときに消す
		- DEBUGビルドのときだけ追加されるようにした。
	- TestForm削除。


- progress.md更新


- MainDialogのイベント、少し整理。


- NotifyObject、修正。
	- DependOn削除。
	- 大幅に簡略化
- ObserverObject追加。
- この通知モデルを用いてGlobalConfig書き直す。
	- MainDialog書き直した。
- ImageManager、盤の読み込みと駒の読み込みを分離。
- ImageManagerConfig削除


- メニューに盤面画像の選択と駒画像の選択部を追加。イベントハンドラも追加。


- ImageConverterで駒ごとの位置微調整を行うコード追加。


- Menuを追加したときのダイアログ高さの計算コード追加。


- 駒画像のコンバーター、後手の角と飛車の位置が入れ替わっていたの修正。


- App/GlobalConfig.cs追加。起動時にglobal_config.xmlを読み込み、アプリ終了時に書き出すコード追加。


- MainDialogに素材選択のメニュー追加。
	少しだけコード書いた。あとでよく考える。


- Positionの盤面に従い、MainDialogの盤上の升に駒を描画するコード追加。手駒はまだ。


- MainDialogにやねうら王のアイコン設定


- 実行ファイルの配置してあるフォルダに
	YaneuraOuGUI2018.txt
	というファイルが存在すると、商用版の「やねうら王」用のモードに切り替わるように。


- MainDialogにスクリーンサイズにfitするようなウィンドウサイズを決定するコードを追加。


- 駒の画像用意。
	- ImageManagerに駒画像から駒を一纏めにするConvert()追加。
	- 駒素材、用意できた。


- 盤面の表示
	- とりあえず、PictureBoxにdpi無視で表示は出来るようになった。
	- MainDialogに、ウィンドゥのサイズを自動調整するコードを書いた。



■  2018/05/27


- Model/Resource/追加
	- ImageLoader.cs追加。
	- ImageManager.cs追加。
	- ImageManagerConfig.cs追加。
	- 盤面と駒の読み込み部分、とりあえず書いた。

- readme.mdの予定として感想戦、指定局面からの連続自己対局などを追加。

- NotifyObject、方針が決まった。(あとで作る)


■  2018/05/25


- NotifyObject作りかけ。(あとで消すかも)


- KifuMoveからcomment削除
- KifuCommentをKifuLogにrename
- KifuNodeにcomment追加。


- KifuMoveにコメント欄、着手時刻、思考ログのpropertyを用意。
	- KifuCommentクラスから派生させることにした。
- Model/Shogi/Kifu/KifuComment.cs追加。
- KifuTreeにrootComment追加。


■  2018/05/24


- readme.mdの将来的な予定に「即席詰将棋機能、中盤終盤課題局面生成機能」の追加


-  Parse CSA/KIF pos/move, Export CSA/KIF fix (Mizarさん)
-  Convert CSA/KIF test (Mizarさん)


- ViewModelからViewへのNotifyの仕組み考える。
- Model/ObjectModel/フォルダ追加
	- NotifyObject.cs追加
	- 作成中

- 画面素材など動的に読み込むなら、リソースを管理するリソースマネージャーみたいなのが必要なのでは…。
	- それはViewが持つことになるのか？本当にその設計は正しいのだろうか…。
	- ResourceManager.cs、一体どこに置けばいいのか…。

- Controller/ フォルダ追加
	- この設計が適切であるかどうか考え中。
- 対局を管理するクラス GameController.cs追加

- MainDialog <-> MainDialogViewModelを1:Nにするか考え中。

            // 1画面に盤面が複数表示できたほうが良いので(2画面、4画面、16画面、あるいは選択、みたいな)
            // mainDialogViewModelのインスタンス自体は1つではなくN個用意して、そのなかから1つ、もしくは2,4,16個を
            // 切り替えて表示できるようにしたほうがいいような気がする。            
            // mainDialog.bind(mainDialogViewModel);

	- MainDialogとMainDialogViewModelは 1:1にしておき、MainDialogViewModelのなかに1:Nでさらに対局関連の情報をもたせるべきでは..



- KifuManager.Bind(Position)追加
	- KifuTree.Bind(Position)追加
	- KifuTreeがPositionのインスタンスを生成するのおかしいので、Bind()して使うように変更する。
- 描画に関して、MVVM with Controlみたいな設計にすることに決定。
- Form1をTestForm1とrename
- View/Win2D/MainDialog追加
- ViewModel/MainDialogViewModel.cs追加
- App/TheApp.cs追加


- KifuTreeからToUsiPositionString()削除。
	- これ、あとでよく考える。


- ViewModeフォルダ追加
- Appフォルダ追加
	- Program.csをApp/に移動
- Form1をView/TestFormに移動



■  2018/05/23


- KifuManagerにそこまでのUSIの"position"コマンドで用いる局面図を保持しておく機能を追加。
	- ToUsiPosition()
	- この設計、良くないかも。あとでよく考える。
- KifuManagerからKifuTreeに、rootBoardTypeとrootSfenを移動させた。


■  2018/05/22


- readme.mdに本GUIの特徴などを追加


- readme.md リンクが一箇所前のままだったの修正。
	- 対応エンジンなどについて追記


- Positionクラスに、盤面配列と手駒などを渡してsfen文字列を構築するメソッド追加
	- // 盤面と手駒、手番を与えて、そのsfenを返す。
    -  public string SfenFromRawdata(Piece[/*81*/] board, Hand[/*2*/] hands, Color turn, int gamePly)
	- やねうら王から移植
	- テスト書いた。うまく動いてそう。


- KifuManager
	- KifuManagerのCSA形式の読み込みのサポート
	- KifuManager.FromCsaString()作業開始
- Position.gamePly、自動プロパティに変更。
- Position.lastPieceNo、getはpublicに変更。


- readme.mdに形勢グラフの件、追記
- docs/progress.md追加
- docs/ を MyShogi/docs/に移動


- KifuTreeのply削除。
	- Position.GamePly追加
- KifuFileTypeにPSN2追加。
- KifuManagerでPSN2フォーマットの読み書きに対応
- KifuManagerでPSNフォーマットの"Timeup"に対応


- PSN2 formatを策定


- readme.mdに商用版について紹介文追加


- KifuTreeにply追加。
- KifuManager
	- PSN形式の書き出しに対応
	- 分岐棋譜に対応
	- 持将棋、詰み、中断、千日手の棋譜に対して簡単な棋譜を読み込んで書き出すテスト完了
- Position.IsCapture(Move)追加。


- KifuManager
	- PSN形式の読み込み、コメントブロック、空行のスキップ処理
	- PSN形式の読み込み、分岐棋譜のサポート


- readme.md更新
	- 商用版で実装する予定のこと書いた


- Positionに入玉判定のmethod追加。DeclarationWin()
- EnteringKingRule.cs追加
- Position.Piece(Color,Piece,...)追加


■  2018/05/21


- KifuManagerのPSN形式サポート
	- 読み込み部、詰みの局面に対応。
	- PSN形式のヘッダ部の解釈、きちんとやることにした。
- Position.IsMated()追加
- PSNフォーマットのサイトを見ると千日手とか宣言勝ちについて規定がない。どう見ても欠陥フォーマットである。
	 http://genedavis.com/articles/2014/05/09/psn/
	- 将棋所の出力するPSN形式が読めればいいや…。
	- 詰み、持将棋、中断の解釈に対応。
	- 分岐棋譜、意外と大変…。対応するか考え中。


- KifuManagerのPSN形式サポート
	- 局面図の読み込み実装
	- 千日手勝ちの局面を正しく読み込めた
	- 勝ちの局面とかはまだ。あとで実装する。書き出しもまだ。あとで。
- Position.IsRepetition()で千日手が5度目の同一局面になっていたのを4度目に修正。


- Moveに、特殊な意味の定数を各種追加。千日手、中断など。
- MoveExtensionsにIsSpecial()追加
- KifuMove.nextMoveに非合法を追加した
- KifuManagerのPSN形式のサポート
	- KifuManager.FromString()にPSN形式の読み込み実装開始
	- これ、千日手負けも単に「Sennichite」としか文字列として書き出していないんだな。
	- チェスから来たからこうなっているのか…欠陥プロトコルだな。
	- 対局者名の読み込み部分まで書けた。
- TestクラスをDevTest1にリネーム
	- Mizarさん用のテストをDevTest2に移動


- Readme.mdに多言語対応、flodgate、通信対局の件、追加。


■  2018/05/20


- KifuManagerのKIF/KI2/CSA/PSN/SFENファイルの読み書きのサポート作業
	- 対応フォーマットにPSN追加
	- KifuTree.RoundTime()追加 , KifuMoveからは削除
	- KifuTree.TotalConsumptionTime()追加
	- KifuTree.Add()にtotalTimeの引数追加。
	- KifuManagerのLoad/Save()やめて、ToString,FromString()に変更。
	- KifuTree.Init()追加
	- KifuManger.FromSfenString()追加
	- KifuTree.RewindToRoot(),FastForward()追加
	- KifuManager , SFENの読み書き、動作確認完了
- BoardTypeにOthers追加
- Mizarさん用のテストコードをTest.Test4()に移動。


- USI2.0.md追加 , readme.mdに追記


- readme.mdに実装予定の内容を追記。



■  2018/05/19


- Mizarさんのプルリクをマージ
	- Shogi.Converter: add export CSA, fix export KIF/KI2
	- Conv to CSA/KIF/KI2 test


■  2018/05/18


- KifuMoveに考慮時間、TimeSpan追加する。
- KifuTreeにAdd(),Remove()追加。


- KifuTree.cs作成
- KifuNode.cs作成
- KifuMove.cs作成
- KifuTreeにDoMove(),UndoMove()実装
	- もう少し色々メソッドを生やせば使えるようになりそう。


- Position.UndoMove()で戻したときの駒落ちのときのhash keyおかしい。あとで原因調べる。
	- UndoMove()でkingSquare更新していたの削除
	- Position.SetState(StateInfo)復活
	- 以前のバージョンとkeyが一致した
- Position.UndoMove()でcaptureとdrop、promoteがきちんとundoされるかを調べる
	- ちゃんとundoされてた。


- PlayerManagerをKifuManagerにリネーム
- Model/Shogi/IO/ を Model/Shogi/Kifu/ にリネーム
- Model/Shogi/Kifu/のなかに
	- KifuFileType.cs
	- KifuManager.cs
	- KifuMove.cs
	を追加


- Model/Shogi/Converter/Kif.cs実装 (Mizarさん) #1



■  2018/05/17


- Bitboard.IsOne()追加


- Position::UndoMove()の実装
- StateInfo.capturedPiece追加
- PieceNo.ZEROをNONEに修正。


- readme.mdに実装予定の機能を追記
- Position.IsRepetition()をpublicに変更
	- Position.IsRepetition()のテスト完了
		- 千日手、引き分け
		- 連続王手の千日手


- Position::千日手判定の実装。
	- 連続王手千日手を非合法手にしないと…。
	- 王手の指し手とか、指してから「王手を回避していません」と表示されないと、「なんで駒つかめないの？」とかなりそう…。
	- Positionのなかでやるべきではないな。Positionでは千日手のチェックだけ出来ればいいや。
- RepetitionState.cs追加
- HASH_KEYにoperator == と !=を追加
	- HASH_KEYをHashKey.csに分離
- 千日手実装できた。テストはまだ。


- StateInfo.Keyをkeyにリネーム。
- StateInfo.lastMove追加。
	- この変数にPosition.DoMove()で反映するようにした。
	- 初期化するコードも追加。
- StateInfo.continuousCheck[]をDoMove()で更新するようにした。
- StateInfo.checkersBBをDoMove()で更新するようにした。
	- SetSfen()でも更新されるようにした。
	- やねうら王のほう、Position::Set()でcontinuousCheck更新してなくて、
		初期局面で王手がかかっていると連続王手の千日手判定に間違うような気がしてきた。まあそんな局面を開始局面として与えないのでいいや…。
	


■  2018/05/16


- docs/解説.txt 追加
- Positionに駒落ちかそうでないかを表現するフラグが必要
	- そもそも棋譜の管理クラスが必要
	- Model/Shogi/IO/追加
		- PlayManager.cs追加
		    /// 1局の対局棋譜を全般的に管理するクラス
			/// ・分岐棋譜をサポート
			/// ・着手時間をサポート
			/// ・対局相手の名前をサポート
			/// ・CSA/KIF/KI2/PSN形式での入出力をサポート
			/// ・千日手の管理、検出をサポート
		- となる予定..(あとで考える)


- PositionにToCsa()なども必要。同じくスタブだけ用意するか。


- PositionにToKif()などが必要
	- Positionに生やすとソースコードがくちゃくちゃになるな…
	- Model/Converter/Kif.csとかに書くか..
		- とりま、スタブだけ用意した。
		- Kif.cs
			- string ToKif(this Position pos)
			- string ToKif(this Position pos , Move move)


- MoveGenのテスト通った
	 - プロ棋譜 3万局に対して生成された合法手しか指されていないことは確認した
	 - MoveGenで生成された指し手に無駄な指し手が生成されていないことは確かめていないが


- 指し手生成書く(指し手生成、legalの判定があれば不要ではあるが…。駒の動かせる場所のガイドを表示したいので作っておく)
- MoveGen.cs追加
- Position.SideToMove()追加
- MoveGen、一応書けた。
	- テストがうまく通らん。あとでデバッグする。


- Model.Shogiをcore/ (Model.Shogi.Core)に移動
- Test.csをtest/ (Model/Test) に移動


■  2018/05/15


- Sfenの読み込みテスト 3万局。
	- すべてIsLegal()をパスするかのテスト
	- perftしたほうがいいかも知れん..
	- とりま、"records20151115.sfen"を読み込むテスト
	- Test.Test2()を追加。
	- "records20151115.sfen"のすべての指し手、IsLegal()でtrueであった。
	- Position.UsiPositionCmd()うまく動いてるっぽい。
- Position.UsiPositionCmd()で、非合法手が混じっていたときに、何手目が非合法であるかを例外のメッセージとして入れることに。
- Position.DoMove()でgamePly++するようにした。
- Position.IsLegal()で歩の移動のときにIsLegalDrop()呼び出していたの修正。
- Position.DoMove()で駒を取ったときにRemovePiece()していなかったの修正。


- 王手回避手になっているかをIsLegal()でチェックするように
	- 駒打ち、駒の移動に関してIsLegal実装完了
- Direct.Util.IsAligned()追加
- Position.SetState()削除


- Bitboard.Not()削除
- Position.Legal()に玉の移動による自殺チェック追加


- Position.LegalPawnDrop()のコード実装。
- Position.LegalDrop()追加。
- Position.IsLegal()で打ち歩、二歩の判定追加。
- Bitboard operator == と != 追加
- UInt128にoperator == と != 追加
- Bitboard.Not()追加。
- Bitboard.GetHashCode(),GetHashCode.Equals()追加。


- Position.UpdateBitboard()追加。
- Position.Pieces(...)いろいろ追加。
- Position.DoMove()でCheckers等の更新。
- Position.SliderBlockers()実装
- Bitboard.LineBB()追加
	- テーブルの初期化追加
- enumにextension methodでToInt()生やすの今ひとつな気がしてきた…まあいいか…。


- Position.AttackersTo()一式追加
- Position.AttackersToPawn()追加。
- Position.Pieces(Color c, Piece pr)追加
- Position.Checkers()実装
- StateInfo.blockersForKing[]追加
- StateInfo.checkSquares[]追加
- StateInfo.pinnersForKing[]追加


■　2018/05/14


- Bitboard.MoreThanOne()追加。
- Bitboard.BetweenBB()追加。
	- 初期化コードをBitboard.Init()に追加
	- Between()うまく動いた
- Direct.cs追加
	- Directions enum追加
	- Direct enum追加
	- directions_of()追加


- Positionの駒に駒番号振る
	- 駒台の駒も一意に定まらなければならないので、BonaPieceのような番号が必要なのでは…。
	- PieceNo.cs追加
- SetSfen() , DoMove()でPieceNoが反映されるようにする。
- Position.PrettyPieceNo()追加
	- うまく動いているようだ…。

- Bitboard::EffectsFrom()追加
	- うまく動いた
- PieceにB_PAWN～W_QUEEN追加。
- Bitboard.EnemyField()追加。
- "case Piece Knight":となっていたの修正。
	これPiece型のKnightという変数名の変数を宣言していることになるのか…。caseのなかで変数宣言してコンパイル通るの怖すぎワロタ。
- Position::Legal() 7割ぐらい書けた


■　2018/05/13


- Position::Legal()追加準備
	- Position::InCheck()用意 , 実装まだ
	- Position::LegalPawnDrop()用意 , 実装まだ
- Positionにoccupied bitboard追加
	- Position::Pieces() , Pieces(Color) , Empties() 追加。
	- Position::Pieces()に現在の局面が反映するようにした。
- PieceにPIECE_BB_NBなど定数を追加。



- Bitboard.KingEffect()追加。
- Color.Not()追加。
- Bitboardに近接駒の利きを返すmethods追加
	- Bitboard.PawnEffect() , KnightEffect() , SilverEffect() , GoldEffect() , KingEffect()
- Bitboard.HorseEffect()追加。
	- うまく動いた
- Bitboard.DragonEffect()追加。
	- うまく動いた


- BishipEffect()うまく動いた
- Bitboard.RookEffect()追加。
- Bitboardにoperator << , >> 追加。
	- UInt128にoperator << , >> 追加。
- Bitboard.RookStepEffect()実装。
- Bitboard.LanceEffect(),LanceStepEffect()実装。
	- ForwardRanks()実装。
	- うまく動いた。


- Bitboard.init()に角の利きのテーブルを初期化するコード実装
- Bitboard.PopCount()追加。
	- BitOp.PopCount()追加。
	- 動作テストした。うまく動いてるっぽい。
- BitOp.PEXT64()追加
- Bitboard.BishopEffect()追加。
	- Bitboard.BishopStepEffect()追加。
	- BishopEffect()おかしいのでテーブル初期化コードなどを見直し中。



■　2018/05/12


- SquareWithWall.cs追加
	- テーブル初期化部をBitboard.init()に追加。
- Bitboard &(Bitboard , Square)みたいなの一式追加。
- Bitboard.init()だけでゲロ吐きそう…。角の利きの初期化前まで書いた。


- 各駒の利きをBitboardで返すメソッド追加
	- Bitboard.PawnStepEffect(),LanceStepEffect(),SilverStepEffect()等、順番に追加
		- この初期化のために飛び利きの処理が必要なのか…。
- Bitboard.Pop()実装
- BitOp.cs追加
	- LSB64()を自前で用意。
- Bitboard.Zero(),NotZero()をIsZero(),IsNotZero()とリネーム。
- 長い利きの初期化ルーチン、やねうら王から移植してくる。(1/5ぐらい完了)
	- SquareWithWallが必要になる。これも移植してくるか…。


- Bitboardをやねうら王から移植
	- Bitboard(Square)を用意
	- IninitalizerでBitboardテーブルの初期化を呼び出すようにした。
- Bitboard.Pretty()を実装
- FILE_BB , RANK_BBテーブルの初期化コード追加。
	- Bitboard.FileBB() , RankBB() , SquareBB()追加。


- UInt128.cs追加
	- UInt128を用いてHASH_KEYを再実装
- Bitboard.cs追加
	- UInt128を用いて実装 and/or/xorをとりあず用意


■　2018/05/11


- USIの"position"を解釈するコード書く。
	- UsiPositionCmd()
	- "position startpos moves 7g7f 3c3d 8h3c+"
		- やねうら王のhash keyと一致した。
	- "position sfen lnsgkgsnl/9/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL w - 1 moves 5a6b 7g7f 3a3b"
		- やねうら王のhash keyと一致した。


- Position::SetSfen()とDoMove()にHashが反映するようにした
- Position::DoMoveでPromote考慮していなかったの修正。
- Zobristの配列に直接アクセスしないように変更。


- Position.Keyは128bit型にしておく。
- Position::set_state()をやねうら王から移植
- Position::ZobristHashの値をやねうら王に合うように実装
- Position.SetSfen()のあとKey()がやねうら王のそれと同じ値になるところまで確認
- Position.ToUsi()、sfenなのか、そこまでの手順を含むのかよくわからなくて良くないな…。
	- Position.ToSfen()にリネームする。


- stringの直接的な連結、なるべく避けてString.Format()を使うようにする
- Misc.cs追加
	- PRNG追加
- Position.csにStateInfo追加
- StateInfoにHash実装
	

■　2018/05/10


- Model/BoardType.cs追加
	- LabelDescriptionのAttributeが必要。あとで考える
	- Utilに用意するか…。
	- reflection使ってattribute取得するコード、移植性に不安があるのでこれ使わないことにする。
- Position.init()をBoardTypeを指定できるようにした。二枚落ちなども指定できる。
	- 名前、InitBoard()にリネーム


- Model/Shogi/Test.cs追加
	- テスト用のコードはこちらに移動
	- UnitTestきちんと書くべきかもしれないが、やねうら王からの移植なので書くほどでもない。
- Positionクラス、参照透明にすべきか…。DoMoveで参照透明になるほうも用意したほうがいいような…。
	- あとで考える。
- Positionにref Hand Hand(Color)追加。
	- Position.PieceOn(Square)もrefを返すように変更。
	- kingSquareのrefを返すKingSquare(Color)も用意
- Position.PutPiece , RemovePieceでKingSquareを更新するようにした。
- iteration変数にrefつけるのC#7.3以降の機能だと…。ターゲットC#7.3に変更する。
	- しかし、これ思ってる機能ではないようであった…。


- Position::DoMove()実装
	- これを実装するのにLegal()を実装する必要がある。
	- そのためにさらにBitboardや利きなど一連の処理が必要。
	- とりあえずLegal()判定なしにDoMove()だけ実装する。
	- 76歩でDoMove()出来るところまでは確認出来た。
- Position.PutPiece()追加
- Flip(this Color)をFlip(ref this Color)に変更。
- Position::Pretty()追加


- Util.FromUsiMove()追加
- SfenExceptionのコンストラクタ追加
- Util.FromUsiMove()追加
	- 関連するUtil.FromUsiSquare()など追加
	- Util.FromUsiFile()
	- Util.FromUsiRank()
- Util.Pretty2(this Move)用意

- 指し手生成を書かないといけないのか…
	- これ、Search()関数を書けばC#版のやねうら王が完成するのでは…。しんどすぎ


- Position::ToUsi() , SetSfen()追加
	- Position::SetSfen()で平手の初期局面をセットして、ToUsi()でUSI文字列になることを確認した。
- Exception.cs追加。
	- SfenException追加
- Util::FromUSI()追加
- ToUSI()をToUsi()とリネーム。
- ToInt()の型、UInt32ではなくInt32に変更する。
- Model/Shogi/SfenUtil.cs削除


■　2018/05/09


- 盤面を表現するPosition.csを追加
	- とりあえず構造体だけ用意
	- Bitboardも必要なのでは…
- 間違えてPieceExtensionsにColorのFlip()を入れていたの削除


- 手駒を表現する Hand.cs追加
	- extension methodでrefを使いたい。これはC# 7.2の機能らしく、buildをC# 7.2に変更。
		- cf. C# 7.2へ言語バージョンを変更したい!!! http://it-mio.com/?p=163
	- HandのToUSI()まで実装完了


- 指し手を表現する Move.cs追加
- Model.Shogi.Utilクラスをpartialに変更。それぞれのファイルに個別に書く。
	- Util.cs削除
- 各クラスのToInt()はUInt32で統一する。


- File,RankなどにIsOk() , ToInt() , Pretty() , ToUSI()を実装する。
- Model.Shogi
	- Util.cs追加。
		- CanPromote()など追加
	- Square.cs追加
		- やねうら王を元に実装
- Rank,FileのPretty()修正。


■　2018/05/08


- Pieceまわり、extension methodで書き直す。
- Color.csを用意。
- Piece.csを用意。
	- なるべく、やねうら王に合わせる。
- Rank.cs追加
- File.cs追加
- Pretty()で日本語文字列として表示できるようにしておく。
- IsOk()で正常な範囲にあるかを判定できるようにしておく。


- Model/Network , Model/TimeMan , Model/Shogi フォルダ追加
- Model/Shogi/sfen フォルダ追加
- Model/Shogi/ShogiType.cs追加
	- ここに、駒・手番・盤面の型定義を行う。
- Model/Shogi/sfen/SfenUtil.cs追加
	- この設計が良いのかどうかについて考え中。


■　2018/05/07


- 製作開始
	- Visual Studio 2017でビルドが出来るようにする
	- C#で開発していく
	- WhaleWatcherのソースコードを参考に作っていく
		- 作者のえびふらいさんとライセンス契約
		- cf. https://github.com/ebifrier/Ragnarok
	- 素材はマイナビさんに用意してもらう

- Model/View/Utilフォルダを用意。
- CsaConnectData.cs追加。
- ざざっとModelを書いていく。Viewは後回し。
